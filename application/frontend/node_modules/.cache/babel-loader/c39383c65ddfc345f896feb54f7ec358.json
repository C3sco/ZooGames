{"ast":null,"code":"/**\n * Creates a timer that accepts a `timerCalc` function to perform calculated timeout retries, such as exponential backoff.\n *\n * @example\n *    let reconnectTimer = new Timer(() => this.connect(), function(tries){\n *      return [1000, 5000, 10000][tries - 1] || 10000\n *    })\n *    reconnectTimer.scheduleTimeout() // fires after 1000\n *    reconnectTimer.scheduleTimeout() // fires after 5000\n *    reconnectTimer.reset()\n *    reconnectTimer.scheduleTimeout() // fires after 1000\n */\nexport default class Timer {\n  constructor(callback, timerCalc) {\n    this.callback = callback;\n    this.timerCalc = timerCalc;\n    this.timer = undefined;\n    this.tries = 0;\n    this.callback = callback;\n    this.timerCalc = timerCalc;\n  }\n\n  reset() {\n    this.tries = 0;\n    clearTimeout(this.timer);\n  } // Cancels any previous scheduleTimeout and schedules callback\n\n\n  scheduleTimeout() {\n    clearTimeout(this.timer);\n    this.timer = setTimeout(() => {\n      this.tries = this.tries + 1;\n      this.callback();\n    }, this.timerCalc(this.tries + 1));\n  }\n\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;AAYA,eAAc,MAAOA,KAAP,CAAY;EAIxBC,YAAmBC,QAAnB,EAA8CC,SAA9C,EAAiE;IAA9C;IAA2B;IAH9C,aAA4BC,SAA5B;IACA,aAAgB,CAAhB;IAGE,KAAKF,QAAL,GAAgBA,QAAhB;IACA,KAAKC,SAAL,GAAiBA,SAAjB;EACD;;EAEDE,KAAK;IACH,KAAKC,KAAL,GAAa,CAAb;IACAC,YAAY,CAAC,KAAKC,KAAN,CAAZ;EACD,CAZuB,CAcxB;;;EACAC,eAAe;IACbF,YAAY,CAAC,KAAKC,KAAN,CAAZ;IAEA,KAAKA,KAAL,GAAkBE,UAAU,CAAC,MAAK;MAChC,KAAKJ,KAAL,GAAa,KAAKA,KAAL,GAAa,CAA1B;MACA,KAAKJ,QAAL;IACD,CAH2B,EAGzB,KAAKC,SAAL,CAAe,KAAKG,KAAL,GAAa,CAA5B,CAHyB,CAA5B;EAID;;AAtBuB","names":["Timer","constructor","callback","timerCalc","undefined","reset","tries","clearTimeout","timer","scheduleTimeout","setTimeout"],"sources":["D:\\Documenti\\GitHub\\ZooGames\\application\\frontend\\node_modules\\@supabase\\realtime-js\\src\\lib\\timer.ts"],"sourcesContent":["/**\n * Creates a timer that accepts a `timerCalc` function to perform calculated timeout retries, such as exponential backoff.\n *\n * @example\n *    let reconnectTimer = new Timer(() => this.connect(), function(tries){\n *      return [1000, 5000, 10000][tries - 1] || 10000\n *    })\n *    reconnectTimer.scheduleTimeout() // fires after 1000\n *    reconnectTimer.scheduleTimeout() // fires after 5000\n *    reconnectTimer.reset()\n *    reconnectTimer.scheduleTimeout() // fires after 1000\n */\nexport default class Timer {\n  timer: number | undefined = undefined\n  tries: number = 0\n\n  constructor(public callback: Function, public timerCalc: Function) {\n    this.callback = callback\n    this.timerCalc = timerCalc\n  }\n\n  reset() {\n    this.tries = 0\n    clearTimeout(this.timer)\n  }\n\n  // Cancels any previous scheduleTimeout and schedules callback\n  scheduleTimeout() {\n    clearTimeout(this.timer)\n\n    this.timer = <any>setTimeout(() => {\n      this.tries = this.tries + 1\n      this.callback()\n    }, this.timerCalc(this.tries + 1))\n  }\n}\n"]},"metadata":{},"sourceType":"module"}