{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { DEFAULT_HEADERS } from '../lib/constants';\nimport { isStorageError } from '../lib/errors';\nimport { get, post, put, remove } from '../lib/fetch';\nimport { resolveFetch } from '../lib/helpers';\nexport default class StorageBucketApi {\n  constructor(url) {\n    let headers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let fetch = arguments.length > 2 ? arguments[2] : undefined;\n    this.url = url;\n    this.headers = Object.assign(Object.assign({}, DEFAULT_HEADERS), headers);\n    this.fetch = resolveFetch(fetch);\n  }\n  /**\n   * Retrieves the details of all Storage buckets within an existing project.\n   */\n\n\n  listBuckets() {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield get(this.fetch, `${this.url}/bucket`, {\n          headers: this.headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n\n        throw error;\n      }\n    });\n  }\n  /**\n   * Retrieves the details of an existing Storage bucket.\n   *\n   * @param id The unique identifier of the bucket you would like to retrieve.\n   */\n\n\n  getBucket(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield get(this.fetch, `${this.url}/bucket/${id}`, {\n          headers: this.headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n\n        throw error;\n      }\n    });\n  }\n  /**\n   * Creates a new Storage bucket\n   *\n   * @param id A unique identifier for the bucket you are creating.\n   * @param options.public The visibility of the bucket. Public buckets don't require an authorization token to download objects, but still require a valid token for all other operations. By default, buckets are private.\n   * @returns newly created bucket id\n   */\n\n\n  createBucket(id) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      public: false\n    };\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield post(this.fetch, `${this.url}/bucket`, {\n          id,\n          name: id,\n          public: options.public\n        }, {\n          headers: this.headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n\n        throw error;\n      }\n    });\n  }\n  /**\n   * Updates a Storage bucket\n   *\n   * @param id A unique identifier for the bucket you are updating.\n   * @param options.public The visibility of the bucket. Public buckets don't require an authorization token to download objects, but still require a valid token for all other operations.\n   */\n\n\n  updateBucket(id, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield put(this.fetch, `${this.url}/bucket/${id}`, {\n          id,\n          name: id,\n          public: options.public\n        }, {\n          headers: this.headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n\n        throw error;\n      }\n    });\n  }\n  /**\n   * Removes all objects inside a single bucket.\n   *\n   * @param id The unique identifier of the bucket you would like to empty.\n   */\n\n\n  emptyBucket(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield post(this.fetch, `${this.url}/bucket/${id}/empty`, {}, {\n          headers: this.headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n\n        throw error;\n      }\n    });\n  }\n  /**\n   * Deletes an existing bucket. A bucket can't be deleted with existing objects inside it.\n   * You must first `empty()` the bucket.\n   *\n   * @param id The unique identifier of the bucket you would like to delete.\n   */\n\n\n  deleteBucket(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield remove(this.fetch, `${this.url}/bucket/${id}`, {}, {\n          headers: this.headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n\n        throw error;\n      }\n    });\n  }\n\n}","map":{"version":3,"mappings":"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","names":["DEFAULT_HEADERS","isStorageError","get","post","put","remove","resolveFetch","StorageBucketApi","constructor","url","headers","fetch","Object","listBuckets","data","error","getBucket","id","createBucket","options","public","name","updateBucket","emptyBucket","deleteBucket"],"sources":["D:\\Documenti\\GitHub\\ZooGames\\application\\frontend\\node_modules\\@supabase\\storage-js\\src\\packages\\StorageBucketApi.ts"],"sourcesContent":["import { DEFAULT_HEADERS } from '../lib/constants'\nimport { isStorageError, StorageError } from '../lib/errors'\nimport { Fetch, get, post, put, remove } from '../lib/fetch'\nimport { resolveFetch } from '../lib/helpers'\nimport { Bucket } from '../lib/types'\n\nexport default class StorageBucketApi {\n  protected url: string\n  protected headers: { [key: string]: string }\n  protected fetch: Fetch\n\n  constructor(url: string, headers: { [key: string]: string } = {}, fetch?: Fetch) {\n    this.url = url\n    this.headers = { ...DEFAULT_HEADERS, ...headers }\n    this.fetch = resolveFetch(fetch)\n  }\n\n  /**\n   * Retrieves the details of all Storage buckets within an existing project.\n   */\n  async listBuckets(): Promise<\n    | {\n        data: Bucket[]\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    try {\n      const data = await get(this.fetch, `${this.url}/bucket`, { headers: this.headers })\n      return { data, error: null }\n    } catch (error) {\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Retrieves the details of an existing Storage bucket.\n   *\n   * @param id The unique identifier of the bucket you would like to retrieve.\n   */\n  async getBucket(\n    id: string\n  ): Promise<\n    | {\n        data: Bucket\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    try {\n      const data = await get(this.fetch, `${this.url}/bucket/${id}`, { headers: this.headers })\n      return { data, error: null }\n    } catch (error) {\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Creates a new Storage bucket\n   *\n   * @param id A unique identifier for the bucket you are creating.\n   * @param options.public The visibility of the bucket. Public buckets don't require an authorization token to download objects, but still require a valid token for all other operations. By default, buckets are private.\n   * @returns newly created bucket id\n   */\n  async createBucket(\n    id: string,\n    options: { public: boolean } = { public: false }\n  ): Promise<\n    | {\n        data: Pick<Bucket, 'name'>\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    try {\n      const data = await post(\n        this.fetch,\n        `${this.url}/bucket`,\n        { id, name: id, public: options.public },\n        { headers: this.headers }\n      )\n      return { data, error: null }\n    } catch (error) {\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Updates a Storage bucket\n   *\n   * @param id A unique identifier for the bucket you are updating.\n   * @param options.public The visibility of the bucket. Public buckets don't require an authorization token to download objects, but still require a valid token for all other operations.\n   */\n  async updateBucket(\n    id: string,\n    options: { public: boolean }\n  ): Promise<\n    | {\n        data: { message: string }\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    try {\n      const data = await put(\n        this.fetch,\n        `${this.url}/bucket/${id}`,\n        { id, name: id, public: options.public },\n        { headers: this.headers }\n      )\n      return { data, error: null }\n    } catch (error) {\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Removes all objects inside a single bucket.\n   *\n   * @param id The unique identifier of the bucket you would like to empty.\n   */\n  async emptyBucket(\n    id: string\n  ): Promise<\n    | {\n        data: { message: string }\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    try {\n      const data = await post(\n        this.fetch,\n        `${this.url}/bucket/${id}/empty`,\n        {},\n        { headers: this.headers }\n      )\n      return { data, error: null }\n    } catch (error) {\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Deletes an existing bucket. A bucket can't be deleted with existing objects inside it.\n   * You must first `empty()` the bucket.\n   *\n   * @param id The unique identifier of the bucket you would like to delete.\n   */\n  async deleteBucket(\n    id: string\n  ): Promise<\n    | {\n        data: { message: string }\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    try {\n      const data = await remove(\n        this.fetch,\n        `${this.url}/bucket/${id}`,\n        {},\n        { headers: this.headers }\n      )\n      return { data, error: null }\n    } catch (error) {\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}