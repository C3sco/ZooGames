{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport crossFetch from 'cross-fetch';\nexport default class PostgrestBuilder {\n  constructor(builder) {\n    this.shouldThrowOnError = false;\n    this.method = builder.method;\n    this.url = builder.url;\n    this.headers = builder.headers;\n    this.schema = builder.schema;\n    this.body = builder.body;\n    this.shouldThrowOnError = builder.shouldThrowOnError;\n    this.signal = builder.signal;\n    this.allowEmpty = builder.allowEmpty;\n\n    if (builder.fetch) {\n      this.fetch = builder.fetch;\n    } else if (typeof fetch === 'undefined') {\n      this.fetch = crossFetch;\n    } else {\n      this.fetch = fetch;\n    }\n  }\n  /**\n   * If there's an error with the query, throwOnError will reject the promise by\n   * throwing the error instead of returning it as part of a successful response.\n   *\n   * {@link https://github.com/supabase/supabase-js/issues/92}\n   */\n\n\n  throwOnError() {\n    this.shouldThrowOnError = true;\n    return this;\n  }\n\n  then(onfulfilled, onrejected) {\n    // https://postgrest.org/en/stable/api.html#switching-schemas\n    if (this.schema === undefined) {// skip\n    } else if (['GET', 'HEAD'].includes(this.method)) {\n      this.headers['Accept-Profile'] = this.schema;\n    } else {\n      this.headers['Content-Profile'] = this.schema;\n    }\n\n    if (this.method !== 'GET' && this.method !== 'HEAD') {\n      this.headers['Content-Type'] = 'application/json';\n    } // NOTE: Invoke w/o `this` to avoid illegal invocation error.\n    // https://github.com/supabase/postgrest-js/pull/247\n\n\n    const _fetch = this.fetch;\n\n    let res = _fetch(this.url.toString(), {\n      method: this.method,\n      headers: this.headers,\n      body: JSON.stringify(this.body),\n      signal: this.signal\n    }).then(res => __awaiter(this, void 0, void 0, function* () {\n      var _a, _b, _c;\n\n      let error = null;\n      let data = null;\n      let count = null;\n      let status = res.status;\n      let statusText = res.statusText;\n\n      if (res.ok) {\n        if (this.method !== 'HEAD') {\n          const body = yield res.text();\n\n          if (body === '') {// Prefer: return=minimal\n          } else if (this.headers['Accept'] === 'text/csv') {\n            data = body;\n          } else if (this.headers['Accept'] && this.headers['Accept'].includes('application/vnd.pgrst.plan+text')) {\n            data = body;\n          } else {\n            data = JSON.parse(body);\n          }\n        }\n\n        const countHeader = (_a = this.headers['Prefer']) === null || _a === void 0 ? void 0 : _a.match(/count=(exact|planned|estimated)/);\n        const contentRange = (_b = res.headers.get('content-range')) === null || _b === void 0 ? void 0 : _b.split('/');\n\n        if (countHeader && contentRange && contentRange.length > 1) {\n          count = parseInt(contentRange[1]);\n        }\n      } else {\n        const body = yield res.text();\n\n        try {\n          error = JSON.parse(body); // Workaround for https://github.com/supabase/postgrest-js/issues/295\n\n          if (Array.isArray(error) && res.status === 404) {\n            data = [];\n            error = null;\n            status = 200;\n            statusText = 'OK';\n          }\n        } catch (_d) {\n          // Workaround for https://github.com/supabase/postgrest-js/issues/295\n          if (res.status === 404 && body === '') {\n            status = 204;\n            statusText = 'No Content';\n          } else {\n            error = {\n              message: body\n            };\n          }\n        }\n\n        if (error && this.allowEmpty && ((_c = error === null || error === void 0 ? void 0 : error.details) === null || _c === void 0 ? void 0 : _c.includes('Results contain 0 rows'))) {\n          error = null;\n          status = 200;\n          statusText = 'OK';\n        }\n\n        if (error && this.shouldThrowOnError) {\n          throw error;\n        }\n      }\n\n      const postgrestResponse = {\n        error,\n        data,\n        count,\n        status,\n        statusText\n      };\n      return postgrestResponse;\n    }));\n\n    if (!this.shouldThrowOnError) {\n      res = res.catch(fetchError => ({\n        error: {\n          message: `FetchError: ${fetchError.message}`,\n          details: '',\n          hint: '',\n          code: fetchError.code || ''\n        },\n        data: null,\n        count: null,\n        status: 0,\n        statusText: ''\n      }));\n    }\n\n    return res.then(onfulfilled, onrejected);\n  }\n\n}","map":{"version":3,"mappings":"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","names":["crossFetch","PostgrestBuilder","constructor","builder","method","url","headers","schema","body","shouldThrowOnError","signal","allowEmpty","fetch","throwOnError","then","onfulfilled","onrejected","undefined","includes","_fetch","res","toString","JSON","stringify","__awaiter","error","data","count","status","statusText","ok","text","parse","countHeader","_a","match","contentRange","get","_b","split","length","parseInt","Array","isArray","message","details","_c","postgrestResponse","catch","fetchError","hint","code"],"sources":["D:\\Documenti\\GitHub\\ZooGames\\application\\frontend\\node_modules\\@supabase\\postgrest-js\\src\\PostgrestBuilder.ts"],"sourcesContent":["import crossFetch from 'cross-fetch'\n\nimport type { Fetch, PostgrestResponse } from './types'\n\nexport default abstract class PostgrestBuilder<Result>\n  implements PromiseLike<PostgrestResponse<Result>>\n{\n  protected method: 'GET' | 'HEAD' | 'POST' | 'PATCH' | 'DELETE'\n  protected url: URL\n  protected headers: Record<string, string>\n  protected schema?: string\n  protected body?: unknown\n  protected shouldThrowOnError = false\n  protected signal?: AbortSignal\n  protected fetch: Fetch\n  protected allowEmpty: boolean\n\n  constructor(builder: PostgrestBuilder<Result>) {\n    this.method = builder.method\n    this.url = builder.url\n    this.headers = builder.headers\n    this.schema = builder.schema\n    this.body = builder.body\n    this.shouldThrowOnError = builder.shouldThrowOnError\n    this.signal = builder.signal\n    this.allowEmpty = builder.allowEmpty\n\n    if (builder.fetch) {\n      this.fetch = builder.fetch\n    } else if (typeof fetch === 'undefined') {\n      this.fetch = crossFetch\n    } else {\n      this.fetch = fetch\n    }\n  }\n\n  /**\n   * If there's an error with the query, throwOnError will reject the promise by\n   * throwing the error instead of returning it as part of a successful response.\n   *\n   * {@link https://github.com/supabase/supabase-js/issues/92}\n   */\n  throwOnError(): this {\n    this.shouldThrowOnError = true\n    return this\n  }\n\n  then<TResult1 = PostgrestResponse<Result>, TResult2 = never>(\n    onfulfilled?:\n      | ((value: PostgrestResponse<Result>) => TResult1 | PromiseLike<TResult1>)\n      | undefined\n      | null,\n    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null\n  ): PromiseLike<TResult1 | TResult2> {\n    // https://postgrest.org/en/stable/api.html#switching-schemas\n    if (this.schema === undefined) {\n      // skip\n    } else if (['GET', 'HEAD'].includes(this.method)) {\n      this.headers['Accept-Profile'] = this.schema\n    } else {\n      this.headers['Content-Profile'] = this.schema\n    }\n    if (this.method !== 'GET' && this.method !== 'HEAD') {\n      this.headers['Content-Type'] = 'application/json'\n    }\n\n    // NOTE: Invoke w/o `this` to avoid illegal invocation error.\n    // https://github.com/supabase/postgrest-js/pull/247\n    const _fetch = this.fetch\n    let res = _fetch(this.url.toString(), {\n      method: this.method,\n      headers: this.headers,\n      body: JSON.stringify(this.body),\n      signal: this.signal,\n    }).then(async (res) => {\n      let error = null\n      let data = null\n      let count: number | null = null\n      let status = res.status\n      let statusText = res.statusText\n\n      if (res.ok) {\n        if (this.method !== 'HEAD') {\n          const body = await res.text()\n          if (body === '') {\n            // Prefer: return=minimal\n          } else if (this.headers['Accept'] === 'text/csv') {\n            data = body\n          } else if (\n            this.headers['Accept'] &&\n            this.headers['Accept'].includes('application/vnd.pgrst.plan+text')\n          ) {\n            data = body\n          } else {\n            data = JSON.parse(body)\n          }\n        }\n\n        const countHeader = this.headers['Prefer']?.match(/count=(exact|planned|estimated)/)\n        const contentRange = res.headers.get('content-range')?.split('/')\n        if (countHeader && contentRange && contentRange.length > 1) {\n          count = parseInt(contentRange[1])\n        }\n      } else {\n        const body = await res.text()\n\n        try {\n          error = JSON.parse(body)\n\n          // Workaround for https://github.com/supabase/postgrest-js/issues/295\n          if (Array.isArray(error) && res.status === 404) {\n            data = []\n            error = null\n            status = 200\n            statusText = 'OK'\n          }\n        } catch {\n          // Workaround for https://github.com/supabase/postgrest-js/issues/295\n          if (res.status === 404 && body === '') {\n            status = 204\n            statusText = 'No Content'\n          } else {\n            error = {\n              message: body,\n            }\n          }\n        }\n\n        if (error && this.allowEmpty && error?.details?.includes('Results contain 0 rows')) {\n          error = null\n          status = 200\n          statusText = 'OK'\n        }\n\n        if (error && this.shouldThrowOnError) {\n          throw error\n        }\n      }\n\n      const postgrestResponse = {\n        error,\n        data,\n        count,\n        status,\n        statusText,\n      }\n\n      return postgrestResponse\n    })\n    if (!this.shouldThrowOnError) {\n      res = res.catch((fetchError) => ({\n        error: {\n          message: `FetchError: ${fetchError.message}`,\n          details: '',\n          hint: '',\n          code: fetchError.code || '',\n        },\n        data: null,\n        count: null,\n        status: 0,\n        statusText: '',\n      }))\n    }\n\n    return res.then(onfulfilled, onrejected)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}