{"ast":null,"code":"var _jsxFileName = \"D:\\\\Documenti\\\\GitHub\\\\ZooGames\\\\application\\\\frontend\\\\src\\\\Giochi\\\\Quiz\\\\Game.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport EndScreen from \"./EndScreen.js\";\nimport Score from \"./Score.js\";\nimport QuizItem from \"./QuizItem.js\";\nimport { supabase } from \"../../components/Database.js\"; // import { updateScore } from \"../../components/UpdateScore.js\"\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction convertDifficultyToPoints(difficulty) {\n  if (difficulty === \"easy\") return 1;else if (difficulty === \"medium\") return 2;else if (difficulty === \"hard\") return 3;else throw new Error(`Invalid difficulty setting: ${difficulty}`);\n}\n\nfunction Game(_ref) {\n  _s();\n\n  let {\n    quizData,\n    session\n  } = _ref;\n  const [gameState, setGameState] = useState({\n    score: 0,\n    triviaIndex: 0,\n    isGameOver: false,\n    startTime: performance.now()\n  });\n  const {\n    score,\n    triviaIndex,\n    isGameOver,\n    startTime\n  } = gameState;\n  const questionNumber = triviaIndex + 1;\n  const numQuestions = quizData.length;\n  const playTimeInSeconds = (performance.now() - startTime) / 1000;\n  let userId;\n\n  if (session != null) {\n    userId = session.user.id;\n  }\n\n  const restartGame = () => {\n    setGameState({\n      score: 0,\n      triviaIndex: 0,\n      isGameOver: false,\n      startTime: performance.now()\n    });\n  };\n\n  const loadNextQuestion = () => {\n    if (triviaIndex >= quizData.length - 1) {\n      setGameState({ ...gameState,\n        isGameOver: true\n      });\n    } else {\n      setGameState({ ...gameState,\n        triviaIndex: triviaIndex + 1\n      });\n    }\n  };\n\n  const onAnswerSelected = (wasPlayerCorrect, difficulty) => {\n    const pointValue = convertDifficultyToPoints(difficulty);\n\n    if (wasPlayerCorrect) {\n      setGameState({ ...gameState,\n        score: score + pointValue\n      });\n    }\n  };\n\n  let pageContent;\n  let pageKey;\n\n  if (isGameOver) {\n    pageKey = \"EndScreen\";\n    console.log(\"score: \" + score);\n    pageContent = /*#__PURE__*/_jsxDEV(EndScreen, {\n      score: score,\n      onRetryClick: restartGame,\n      playTime: playTimeInSeconds,\n      session: session\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }, this);\n  } else {\n    pageKey = triviaIndex;\n    const triviaQuestion = quizData[triviaIndex];\n    const {\n      correct_answer,\n      incorrect_answers,\n      question,\n      difficulty\n    } = triviaQuestion;\n    pageContent = /*#__PURE__*/_jsxDEV(QuizItem, {\n      question: question,\n      difficulty: difficulty,\n      correctAnswer: correct_answer,\n      incorrectAnswers: incorrect_answers,\n      onNextClick: loadNextQuestion,\n      onAnswerSelected: onAnswerSelected\n    }, triviaIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Score, {\n      score: score,\n      questionNumber: questionNumber,\n      totalQuestions: numQuestions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), pageContent]\n  }, void 0, true);\n}\n\n_s(Game, \"+SsqnPq3VKz0qVQxDGExp+dR39U=\");\n\n_c = Game;\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["useEffect","useState","EndScreen","Score","QuizItem","supabase","convertDifficultyToPoints","difficulty","Error","Game","quizData","session","gameState","setGameState","score","triviaIndex","isGameOver","startTime","performance","now","questionNumber","numQuestions","length","playTimeInSeconds","userId","user","id","restartGame","loadNextQuestion","onAnswerSelected","wasPlayerCorrect","pointValue","pageContent","pageKey","console","log","triviaQuestion","correct_answer","incorrect_answers","question"],"sources":["D:/Documenti/GitHub/ZooGames/application/frontend/src/Giochi/Quiz/Game.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport EndScreen from \"./EndScreen.js\";\r\nimport Score from \"./Score.js\";\r\nimport QuizItem from \"./QuizItem.js\";\r\nimport { supabase } from \"../../components/Database.js\";\r\n// import { updateScore } from \"../../components/UpdateScore.js\"\r\n\r\nfunction convertDifficultyToPoints(difficulty) {\r\n  if (difficulty === \"easy\") return 1;\r\n  else if (difficulty === \"medium\") return 2;\r\n  else if (difficulty === \"hard\") return 3;\r\n  else throw new Error(`Invalid difficulty setting: ${difficulty}`);\r\n}\r\n\r\nfunction Game({ quizData, session }) {\r\n\r\n  const [gameState, setGameState] = useState({\r\n    score: 0,\r\n    triviaIndex: 0,\r\n    isGameOver: false,\r\n    startTime: performance.now(),\r\n  });\r\n\r\n  const { score, triviaIndex, isGameOver, startTime } = gameState;\r\n  const questionNumber = triviaIndex + 1;\r\n  const numQuestions = quizData.length;\r\n  const playTimeInSeconds = (performance.now() - startTime) / 1000;\r\n\r\n  let userId;\r\n\r\n  if(session!=null){\r\n    userId = session.user.id;\r\n  }\r\n  \r\n\r\n  const restartGame = () => {\r\n    setGameState({\r\n      score: 0,\r\n      triviaIndex: 0,\r\n      isGameOver: false,\r\n      startTime: performance.now(),\r\n    });\r\n  };\r\n\r\n  const loadNextQuestion = () => {\r\n    if (triviaIndex >= quizData.length - 1) {\r\n      setGameState({ ...gameState, isGameOver: true });\r\n    } else {\r\n      setGameState({ ...gameState, triviaIndex: triviaIndex + 1 });\r\n    }\r\n  };\r\n\r\n  const onAnswerSelected = (wasPlayerCorrect, difficulty) => {\r\n    const pointValue = convertDifficultyToPoints(difficulty);\r\n    if (wasPlayerCorrect) {\r\n      setGameState({\r\n        ...gameState,\r\n        score: score + pointValue,\r\n      });\r\n    }\r\n  };\r\n\r\n  let pageContent;\r\n  let pageKey;\r\n\r\n  if (isGameOver) {\r\n    pageKey = \"EndScreen\";\r\n    console.log(\"score: \" + score)\r\n      pageContent = (\r\n        <EndScreen\r\n          score={score}\r\n          onRetryClick={restartGame}\r\n          playTime={playTimeInSeconds}\r\n          session = {session}\r\n        />\r\n      );\r\n  } else {\r\n    pageKey = triviaIndex;\r\n    const triviaQuestion = quizData[triviaIndex];\r\n    const { correct_answer, incorrect_answers, question, difficulty } = triviaQuestion;\r\n    pageContent = (\r\n      <QuizItem\r\n        key={triviaIndex}\r\n        question={question}\r\n        difficulty={difficulty}\r\n        correctAnswer={correct_answer}\r\n        incorrectAnswers={incorrect_answers}\r\n        onNextClick={loadNextQuestion}\r\n        onAnswerSelected={onAnswerSelected}\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <br></br>\r\n      <Score score={score} questionNumber={questionNumber} totalQuestions={numQuestions} />\r\n      {pageContent}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Game;"],"mappings":"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"},"metadata":{},"sourceType":"module"}