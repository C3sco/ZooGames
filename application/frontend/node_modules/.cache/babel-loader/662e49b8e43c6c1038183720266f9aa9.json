{"ast":null,"code":"import React, { useContext, useState, useEffect } from 'react';\nimport { supabase } from './Database.js';\nexport default function Auth() {\n  /*\r\n  const [loading, setLoading] = useState(false)\r\n  const [email, setEmail] = useState('');\r\n    const handeLogin = async (e) => {\r\n    e.preventDefault();\r\n      try{\r\n      setLoading(true);\r\n      const {error} = await supabase.auth.signInWithOtp({email})\r\n    }\r\n  }*/\n}\n/*\r\nconst AuthContext = React.createContext()\r\n\r\nexport function AuthProvider({ children }) {\r\n    const [user, setUser] = useState()\r\n    const [loading, setLoading] = useState(true)\r\n  \r\n    useEffect(() => {\r\n      // Check active sessions and sets the user\r\n      const session = supabase.auth.session()\r\n  \r\n      setUser(session?.user ?? null)\r\n      setLoading(false)\r\n  \r\n      // Listen for changes on auth state (logged in, signed out, etc.)\r\n      const { data: listener } = supabase.auth.onAuthStateChange(async (event, session) => {\r\n        setUser(session?.user ?? null)\r\n        setLoading(false)\r\n      })\r\n  \r\n      return () => {\r\n        listener?.unsubscribe()\r\n      }\r\n    }, [])\r\n  \r\n    // Will be passed down to Signup, Login and Dashboard components\r\n    const value = {\r\n      signUp: (data) => supabase.auth.signUp(data),\r\n      signIn: (data) => supabase.auth.signIn(data),\r\n      signOut: () => supabase.auth.signOut(),\r\n      user,\r\n    }\r\n  \r\n    return <AuthContext.Provider value={value}>{!loading && children}</AuthContext.Provider>\r\n  }\r\n\r\n  export function useAuth() {\r\n    return useContext(AuthContext)\r\n  }*/\n\n_c = Auth;\n\nvar _c;\n\n$RefreshReg$(_c, \"Auth\");","map":{"version":3,"names":["React","useContext","useState","useEffect","supabase","Auth"],"sources":["D:/Documenti/GitHub/ZooGames/application/frontend/src/components/Auth.js"],"sourcesContent":["import React, { useContext, useState, useEffect } from 'react'\r\nimport { supabase } from './Database.js'\r\n\r\nexport default function Auth() {\r\n  /*\r\n  const [loading, setLoading] = useState(false)\r\n  const [email, setEmail] = useState('');\r\n\r\n  const handeLogin = async (e) => {\r\n    e.preventDefault();\r\n\r\n    try{\r\n      setLoading(true);\r\n      const {error} = await supabase.auth.signInWithOtp({email})\r\n    }\r\n  }*/\r\n \r\n}\r\n\r\n\r\n/*\r\nconst AuthContext = React.createContext()\r\n\r\nexport function AuthProvider({ children }) {\r\n    const [user, setUser] = useState()\r\n    const [loading, setLoading] = useState(true)\r\n  \r\n    useEffect(() => {\r\n      // Check active sessions and sets the user\r\n      const session = supabase.auth.session()\r\n  \r\n      setUser(session?.user ?? null)\r\n      setLoading(false)\r\n  \r\n      // Listen for changes on auth state (logged in, signed out, etc.)\r\n      const { data: listener } = supabase.auth.onAuthStateChange(async (event, session) => {\r\n        setUser(session?.user ?? null)\r\n        setLoading(false)\r\n      })\r\n  \r\n      return () => {\r\n        listener?.unsubscribe()\r\n      }\r\n    }, [])\r\n  \r\n    // Will be passed down to Signup, Login and Dashboard components\r\n    const value = {\r\n      signUp: (data) => supabase.auth.signUp(data),\r\n      signIn: (data) => supabase.auth.signIn(data),\r\n      signOut: () => supabase.auth.signOut(),\r\n      user,\r\n    }\r\n  \r\n    return <AuthContext.Provider value={value}>{!loading && children}</AuthContext.Provider>\r\n  }\r\n\r\n  export function useAuth() {\r\n    return useContext(AuthContext)\r\n  }*/"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,EAAsCC,SAAtC,QAAuD,OAAvD;AACA,SAASC,QAAT,QAAyB,eAAzB;AAEA,eAAe,SAASC,IAAT,GAAgB;EAC7B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIC;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;KAvDwBA,I"},"metadata":{},"sourceType":"module"}