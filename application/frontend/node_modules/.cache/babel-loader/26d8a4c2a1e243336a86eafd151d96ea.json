{"ast":null,"code":"var _jsxFileName = \"D:\\\\Documenti\\\\GitHub\\\\ZooGames\\\\application\\\\frontend\\\\src\\\\Giochi\\\\Quiz\\\\Game.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport EndScreen from \"./EndScreen.js\";\nimport Score from \"./Score.js\";\nimport QuizItem from \"./QuizItem.js\";\nimport { supabase } from \"../../components/Database.js\"; // import { updateScore } from \"../../components/UpdateScore.js\"\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction convertDifficultyToPoints(difficulty) {\n  if (difficulty === \"easy\") return 1;else if (difficulty === \"medium\") return 2;else if (difficulty === \"hard\") return 3;else throw new Error(`Invalid difficulty setting: ${difficulty}`);\n}\n\nfunction Game(_ref) {\n  _s();\n\n  let {\n    quizData,\n    session\n  } = _ref;\n  const [scoreDone, setScoreDone] = useState();\n  const [alert, setAlert] = useState('');\n  let userId;\n\n  if (session != null) {\n    userId = session.user.id;\n    setAlert('');\n  } else {\n    setAlert('Effettua il login per iniziare a guadagnare punti!');\n  }\n\n  const [gameState, setGameState] = useState({\n    score: 0,\n    triviaIndex: 0,\n    isGameOver: false,\n    startTime: performance.now()\n  });\n  const {\n    score,\n    triviaIndex,\n    isGameOver,\n    startTime\n  } = gameState;\n  const questionNumber = triviaIndex + 1;\n  const numQuestions = quizData.length;\n  const playTimeInSeconds = (performance.now() - startTime) / 1000;\n\n  const restartGame = () => {\n    setGameState({\n      score: 0,\n      triviaIndex: 0,\n      isGameOver: false,\n      startTime: performance.now()\n    });\n  };\n\n  const loadNextQuestion = () => {\n    if (triviaIndex >= quizData.length - 1) {\n      setGameState({ ...gameState,\n        isGameOver: true\n      });\n    } else {\n      setGameState({ ...gameState,\n        triviaIndex: triviaIndex + 1\n      });\n    }\n  };\n\n  const onAnswerSelected = (wasPlayerCorrect, difficulty) => {\n    const pointValue = convertDifficultyToPoints(difficulty);\n\n    if (wasPlayerCorrect) {\n      setGameState({ ...gameState,\n        score: score + pointValue\n      });\n    }\n  };\n\n  let finalScore;\n  let pageContent;\n  let pageKey;\n  useEffect(() => {\n    async function updateScore(userId, score) {\n      if (userId != null && isGameOver) {\n        try {\n          finalScore = 0;\n          const userScore = await supabase.from('users').select('score').eq('id', userId);\n          console.log(\"userscore: \" + userScore);\n          finalScore = parseInt(score + userScore);\n          console.log(\"Punteggio attuale: \" + finalScore);\n          await supabase.from('users').update({\n            score: finalScore\n          }).eq('id', userId);\n        } catch (err) {\n          console.log(\"Errore nell'aggiornamento del punteggio: \" + err);\n        }\n      }\n    }\n\n    updateScore(score);\n  });\n\n  if (isGameOver) {\n    pageKey = \"EndScreen\";\n    console.log(\"score: \" + score); // finalScore = updateScore(userId, score).then(() => {\n\n    pageContent = /*#__PURE__*/_jsxDEV(EndScreen, {\n      score: score,\n      bestScore: 0,\n      onRetryClick: restartGame,\n      playTime: playTimeInSeconds\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }, this); // });\n  } else {\n    pageKey = triviaIndex;\n    const triviaQuestion = quizData[triviaIndex];\n    const {\n      correct_answer,\n      incorrect_answers,\n      question,\n      difficulty\n    } = triviaQuestion;\n    pageContent = /*#__PURE__*/_jsxDEV(QuizItem, {\n      question: question,\n      difficulty: difficulty,\n      correctAnswer: correct_answer,\n      incorrectAnswers: incorrect_answers,\n      onNextClick: loadNextQuestion,\n      onAnswerSelected: onAnswerSelected\n    }, triviaIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), alert && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-danger\",\n      children: alert\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(Score, {\n      score: score,\n      questionNumber: questionNumber,\n      totalQuestions: numQuestions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), pageContent]\n  }, void 0, true);\n}\n\n_s(Game, \"rIpaEffBjh4HhPp+HkaxzdjWTeg=\");\n\n_c = Game;\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["useEffect","useState","EndScreen","Score","QuizItem","supabase","convertDifficultyToPoints","difficulty","Error","Game","quizData","session","scoreDone","setScoreDone","alert","setAlert","userId","user","id","gameState","setGameState","score","triviaIndex","isGameOver","startTime","performance","now","questionNumber","numQuestions","length","playTimeInSeconds","restartGame","loadNextQuestion","onAnswerSelected","wasPlayerCorrect","pointValue","finalScore","pageContent","pageKey","updateScore","userScore","from","select","eq","console","log","parseInt","update","err","triviaQuestion","correct_answer","incorrect_answers","question"],"sources":["D:/Documenti/GitHub/ZooGames/application/frontend/src/Giochi/Quiz/Game.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport EndScreen from \"./EndScreen.js\";\r\nimport Score from \"./Score.js\";\r\nimport QuizItem from \"./QuizItem.js\";\r\nimport { supabase } from \"../../components/Database.js\";\r\n// import { updateScore } from \"../../components/UpdateScore.js\"\r\n\r\nfunction convertDifficultyToPoints(difficulty) {\r\n  if (difficulty === \"easy\") return 1;\r\n  else if (difficulty === \"medium\") return 2;\r\n  else if (difficulty === \"hard\") return 3;\r\n  else throw new Error(`Invalid difficulty setting: ${difficulty}`);\r\n}\r\n\r\nfunction Game({ quizData, session }) {\r\n  const[scoreDone,setScoreDone] = useState();\r\n  const[alert,setAlert] = useState('');\r\n  let userId;\r\n  if(session!=null){\r\n    userId = session.user.id;\r\n    setAlert('')\r\n  }else{\r\n    setAlert('Effettua il login per iniziare a guadagnare punti!')\r\n  }\r\n  \r\n\r\n  const [gameState, setGameState] = useState({\r\n    score: 0,\r\n    triviaIndex: 0,\r\n    isGameOver: false,\r\n    startTime: performance.now(),\r\n  });\r\n\r\n  const { score, triviaIndex, isGameOver, startTime } = gameState;\r\n  const questionNumber = triviaIndex + 1;\r\n  const numQuestions = quizData.length;\r\n  const playTimeInSeconds = (performance.now() - startTime) / 1000;\r\n\r\n  const restartGame = () => {\r\n    setGameState({\r\n      score: 0,\r\n      triviaIndex: 0,\r\n      isGameOver: false,\r\n      startTime: performance.now(),\r\n    });\r\n  };\r\n\r\n  const loadNextQuestion = () => {\r\n    if (triviaIndex >= quizData.length - 1) {\r\n      setGameState({ ...gameState, isGameOver: true });\r\n    } else {\r\n      setGameState({ ...gameState, triviaIndex: triviaIndex + 1 });\r\n    }\r\n  };\r\n\r\n  const onAnswerSelected = (wasPlayerCorrect, difficulty) => {\r\n    const pointValue = convertDifficultyToPoints(difficulty);\r\n    if (wasPlayerCorrect) {\r\n      setGameState({\r\n        ...gameState,\r\n        score: score + pointValue,\r\n      });\r\n    }\r\n  };\r\n\r\n  let finalScore;\r\n  let pageContent;\r\n  let pageKey;\r\n\r\n  useEffect(() =>{ \r\n    async function updateScore(userId, score) {\r\n      if (userId != null && isGameOver) {\r\n          try {\r\n              finalScore = 0\r\n              const userScore = await supabase.from('users').select('score').eq('id', userId);\r\n              console.log(\"userscore: \" + userScore)\r\n              finalScore = parseInt(score + userScore);\r\n              console.log(\"Punteggio attuale: \" + finalScore);\r\n              await supabase.from('users').update({ score: finalScore }).eq('id', userId);\r\n          } catch (err) {\r\n              console.log(\"Errore nell'aggiornamento del punteggio: \" + err);\r\n          }\r\n      }\r\n    }\r\n    updateScore(score);\r\n  })\r\n\r\n  if (isGameOver) {\r\n    pageKey = \"EndScreen\";\r\n    console.log(\"score: \" + score)\r\n    // finalScore = updateScore(userId, score).then(() => {\r\n      pageContent = (\r\n        <EndScreen\r\n          score={score}\r\n          bestScore={0}\r\n          onRetryClick={restartGame}\r\n          playTime={playTimeInSeconds}\r\n        />\r\n      );\r\n    // });\r\n  } else {\r\n    pageKey = triviaIndex;\r\n    const triviaQuestion = quizData[triviaIndex];\r\n    const { correct_answer, incorrect_answers, question, difficulty } = triviaQuestion;\r\n    pageContent = (\r\n      <QuizItem\r\n        key={triviaIndex}\r\n        question={question}\r\n        difficulty={difficulty}\r\n        correctAnswer={correct_answer}\r\n        incorrectAnswers={incorrect_answers}\r\n        onNextClick={loadNextQuestion}\r\n        onAnswerSelected={onAnswerSelected}\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <br></br>\r\n      {alert && <div className=\"text-danger\">{alert}</div>}\r\n      <Score score={score} questionNumber={questionNumber} totalQuestions={numQuestions} />\r\n      {pageContent}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Game;"],"mappings":"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"},"metadata":{},"sourceType":"module"}