{"ast":null,"code":"var _jsxFileName = \"D:\\\\Documenti\\\\GitHub\\\\ZooGames\\\\application\\\\frontend\\\\src\\\\Giochi\\\\Impiccato\\\\Popup.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { checkWin } from './helpers.js';\nimport { supabase } from '../../components/Database.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst db = supabase;\n\nconst Popup = _ref => {\n  _s();\n\n  let {\n    correctLetters,\n    wrongLetters,\n    selectedWord,\n    setPlayable,\n    playAgain,\n    points,\n    id\n  } = _ref;\n  const [scoreUpdated, setScoreUpdated] = useState(true);\n  let finalScore = 0;\n\n  async function updateScore(userId, score) {\n    if (userId != null && !scoreUpdated) {\n      try {\n        setScoreUpdated(true);\n        finalScore = 0;\n        const userScore = await supabase.from('users').select('score').eq('id', userId);\n        finalScore = parseInt(score + userScore.data[0].score);\n        await supabase.from('users').update({\n          'score': finalScore\n        }).eq('id', userId);\n        console.log(\"Punteggio Arggiornato! Ora hai: \" + finalScore + \" punti\");\n      } catch (err) {\n        console.log(\"Errore nell'aggiornamento del punteggio: \" + err);\n      }\n    }\n  }\n\n  let finalMessage = '';\n  let finalMessageRevealWord = '';\n  let playable = true;\n\n  if (checkWin(correctLetters, wrongLetters, selectedWord) === 'win') {\n    finalMessage = 'Congratulazioni! Hai vinto 10 punti! ðŸ˜ƒ';\n    consolge.log('win');\n    playable = false;\n    points += 10;\n    updateScore(id, points);\n  } else if (checkWin(correctLetters, wrongLetters, selectedWord) === 'lose') {\n    finalMessage = 'Sfortunatamente non hai indovinato, hai perso 10 punti ðŸ˜•';\n    console.log('lose');\n    finalMessageRevealWord = `...la parola era: ${selectedWord}`;\n    playable = false;\n    points -= 10;\n  }\n\n  useEffect(() => {\n    setPlayable(playable);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"popup-container\",\n    style: finalMessage !== '' ? {\n      display: 'flex'\n    } : {},\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"popup\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: finalMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: finalMessageRevealWord\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"c3-play\",\n        onClick: playAgain,\n        children: \"Gioca di nuovo!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Popup, \"FM8CwLa8IIuBHIDxy6ICcrPHRgw=\");\n\n_c = Popup;\nexport default Popup;\n\nvar _c;\n\n$RefreshReg$(_c, \"Popup\");","map":{"version":3,"names":["React","useEffect","useState","checkWin","supabase","db","Popup","correctLetters","wrongLetters","selectedWord","setPlayable","playAgain","points","id","scoreUpdated","setScoreUpdated","finalScore","updateScore","userId","score","userScore","from","select","eq","parseInt","data","update","console","log","err","finalMessage","finalMessageRevealWord","playable","consolge","display"],"sources":["D:/Documenti/GitHub/ZooGames/application/frontend/src/Giochi/Impiccato/Popup.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { checkWin } from './helpers.js';\r\nimport { supabase } from '../../components/Database.js';\r\n\r\nconst db = supabase;\r\n\r\nconst Popup = ({correctLetters, wrongLetters, selectedWord, setPlayable, playAgain, points, id}) => {\r\n  const [scoreUpdated, setScoreUpdated] = useState(true)\r\n\r\n  let finalScore = 0\r\n  async function updateScore(userId, score) {\r\n    if (userId != null && !scoreUpdated) {\r\n      try {\r\n        setScoreUpdated(true)\r\n        finalScore = 0\r\n        const userScore = await supabase.from('users').select('score').eq('id', userId);\r\n        finalScore = parseInt(score + userScore.data[0].score);\r\n        await supabase.from('users').update({ 'score': finalScore }).eq('id', userId);\r\n        console.log(\"Punteggio Arggiornato! Ora hai: \" + finalScore + \" punti\")\r\n\r\n      } catch (err) {\r\n        console.log(\"Errore nell'aggiornamento del punteggio: \" + err);\r\n      }\r\n    }\r\n  }\r\n\r\n  let finalMessage = '';\r\n  let finalMessageRevealWord = '';\r\n  let playable = true;\r\n\r\n  if( checkWin(correctLetters, wrongLetters, selectedWord) === 'win' ) {\r\n    finalMessage = 'Congratulazioni! Hai vinto 10 punti! ðŸ˜ƒ';\r\n    consolge.log('win')\r\n    playable = false;\r\n    points += 10;\r\n    updateScore(id,points)\r\n  } else if( checkWin(correctLetters, wrongLetters, selectedWord) === 'lose' ) {\r\n    finalMessage = 'Sfortunatamente non hai indovinato, hai perso 10 punti ðŸ˜•';\r\n    console.log('lose')\r\n    finalMessageRevealWord = `...la parola era: ${selectedWord}`;\r\n    playable = false;\r\n    points -= 10;\r\n  }\r\n\r\n  useEffect(() => {\r\n    setPlayable(playable);\r\n  });\r\n\r\n  return (\r\n    <div className=\"popup-container\" style={finalMessage !== '' ? {display:'flex'} : {}}>\r\n      <div className=\"popup\">\r\n        <h2>{finalMessage}</h2>\r\n        <h3>{finalMessageRevealWord}</h3>\r\n        <button className='c3-play' onClick={playAgain}>Gioca di nuovo!</button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Popup\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}