{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { w3cwebsocket } from 'websocket';\nimport { VSN, CHANNEL_EVENTS, TRANSPORTS, SOCKET_STATES, DEFAULT_TIMEOUT, WS_CLOSE_NORMAL, DEFAULT_HEADERS, CONNECTION_STATE } from './lib/constants';\nimport Timer from './lib/timer';\nimport Serializer from './lib/serializer';\nimport RealtimeChannel from './RealtimeChannel';\n\nconst noop = () => {};\n\nexport default class RealtimeClient {\n  /**\n   * Initializes the Socket.\n   *\n   * @param endPoint The string WebSocket endpoint, ie, \"ws://example.com/socket\", \"wss://example.com\", \"/socket\" (inherited host & protocol)\n   * @param options.transport The Websocket Transport, for example WebSocket.\n   * @param options.timeout The default timeout in milliseconds to trigger push timeouts.\n   * @param options.params The optional params to pass when connecting.\n   * @param options.headers The optional headers to pass when connecting.\n   * @param options.heartbeatIntervalMs The millisec interval to send a heartbeat message.\n   * @param options.logger The optional function for specialized logging, ie: logger: (kind, msg, data) => { console.log(`${kind}: ${msg}`, data) }\n   * @param options.encode The function to encode outgoing messages. Defaults to JSON: (payload, callback) => callback(JSON.stringify(payload))\n   * @param options.decode The function to decode incoming messages. Defaults to Serializer's decode.\n   * @param options.reconnectAfterMs he optional function that returns the millsec reconnect interval. Defaults to stepped backoff off.\n   */\n  constructor(endPoint, options) {\n    var _a;\n\n    this.accessToken = null;\n    this.channels = [];\n    this.endPoint = '';\n    this.headers = DEFAULT_HEADERS;\n    this.params = {};\n    this.timeout = DEFAULT_TIMEOUT;\n    this.transport = w3cwebsocket;\n    this.heartbeatIntervalMs = 30000;\n    this.heartbeatTimer = undefined;\n    this.pendingHeartbeatRef = null;\n    this.ref = 0;\n    this.logger = noop;\n    this.conn = null;\n    this.sendBuffer = [];\n    this.serializer = new Serializer();\n    this.stateChangeCallbacks = {\n      open: [],\n      close: [],\n      error: [],\n      message: []\n    };\n    this.eventsPerSecondLimitMs = 100;\n    this.inThrottle = false;\n    this.endPoint = `${endPoint}/${TRANSPORTS.websocket}`;\n    if (options === null || options === void 0 ? void 0 : options.params) this.params = options.params;\n    if (options === null || options === void 0 ? void 0 : options.headers) this.headers = Object.assign(Object.assign({}, this.headers), options.headers);\n    if (options === null || options === void 0 ? void 0 : options.timeout) this.timeout = options.timeout;\n    if (options === null || options === void 0 ? void 0 : options.logger) this.logger = options.logger;\n    if (options === null || options === void 0 ? void 0 : options.transport) this.transport = options.transport;\n    if (options === null || options === void 0 ? void 0 : options.heartbeatIntervalMs) this.heartbeatIntervalMs = options.heartbeatIntervalMs;\n    const eventsPerSecond = (_a = options === null || options === void 0 ? void 0 : options.params) === null || _a === void 0 ? void 0 : _a.eventsPerSecond;\n    if (eventsPerSecond) this.eventsPerSecondLimitMs = Math.floor(1000 / eventsPerSecond);\n    this.reconnectAfterMs = (options === null || options === void 0 ? void 0 : options.reconnectAfterMs) ? options.reconnectAfterMs : tries => {\n      return [1000, 2000, 5000, 10000][tries - 1] || 10000;\n    };\n    this.encode = (options === null || options === void 0 ? void 0 : options.encode) ? options.encode : (payload, callback) => {\n      return callback(JSON.stringify(payload));\n    };\n    this.decode = (options === null || options === void 0 ? void 0 : options.decode) ? options.decode : this.serializer.decode.bind(this.serializer);\n    this.reconnectTimer = new Timer(() => __awaiter(this, void 0, void 0, function* () {\n      this.disconnect();\n      this.connect();\n    }), this.reconnectAfterMs);\n  }\n  /**\n   * Connects the socket, unless already connected.\n   */\n\n\n  connect() {\n    if (this.conn) {\n      return;\n    }\n\n    this.conn = new this.transport(this._endPointURL(), [], null, this.headers);\n\n    if (this.conn) {\n      this.conn.binaryType = 'arraybuffer';\n\n      this.conn.onopen = () => this._onConnOpen();\n\n      this.conn.onerror = error => this._onConnError(error);\n\n      this.conn.onmessage = event => this._onConnMessage(event);\n\n      this.conn.onclose = event => this._onConnClose(event);\n    }\n  }\n  /**\n   * Disconnects the socket.\n   *\n   * @param code A numeric status code to send on disconnect.\n   * @param reason A custom reason for the disconnect.\n   */\n\n\n  disconnect(code, reason) {\n    if (this.conn) {\n      this.conn.onclose = function () {}; // noop\n\n\n      if (code) {\n        this.conn.close(code, reason !== null && reason !== void 0 ? reason : '');\n      } else {\n        this.conn.close();\n      }\n\n      this.conn = null; // remove open handles\n\n      this.heartbeatTimer && clearInterval(this.heartbeatTimer);\n      this.reconnectTimer.reset();\n    }\n  }\n\n  getChannels() {\n    return this.channels;\n  }\n\n  removeChannel(channel) {\n    return channel.unsubscribe().then(status => {\n      if (this.channels.length === 0) {\n        this.disconnect();\n      }\n\n      return status;\n    });\n  }\n\n  removeAllChannels() {\n    return Promise.all(this.channels.map(channel => channel.unsubscribe())).then(values => {\n      this.disconnect();\n      return values;\n    });\n  }\n  /**\n   * Logs the message.\n   *\n   * For customized logging, `this.logger` can be overriden.\n   */\n\n\n  log(kind, msg, data) {\n    this.logger(kind, msg, data);\n  }\n  /**\n   * Returns the current state of the socket.\n   */\n\n\n  connectionState() {\n    switch (this.conn && this.conn.readyState) {\n      case SOCKET_STATES.connecting:\n        return CONNECTION_STATE.Connecting;\n\n      case SOCKET_STATES.open:\n        return CONNECTION_STATE.Open;\n\n      case SOCKET_STATES.closing:\n        return CONNECTION_STATE.Closing;\n\n      default:\n        return CONNECTION_STATE.Closed;\n    }\n  }\n  /**\n   * Retuns `true` is the connection is open.\n   */\n\n\n  isConnected() {\n    return this.connectionState() === CONNECTION_STATE.Open;\n  }\n\n  channel(topic) {\n    let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      config: {}\n    };\n\n    if (!this.isConnected()) {\n      this.connect();\n    }\n\n    const chan = new RealtimeChannel(`realtime:${topic}`, params, this);\n    this.channels.push(chan);\n    return chan;\n  }\n  /**\n   * Push out a message if the socket is connected.\n   *\n   * If the socket is not connected, the message gets enqueued within a local buffer, and sent out when a connection is next established.\n   */\n\n\n  push(data) {\n    const {\n      topic,\n      event,\n      payload,\n      ref\n    } = data;\n\n    let callback = () => {\n      this.encode(data, result => {\n        var _a;\n\n        (_a = this.conn) === null || _a === void 0 ? void 0 : _a.send(result);\n      });\n    };\n\n    this.log('push', `${topic} ${event} (${ref})`, payload);\n\n    if (this.isConnected()) {\n      if (['broadcast', 'presence', 'postgres_changes'].includes(event)) {\n        const isThrottled = this._throttle(callback)();\n\n        if (isThrottled) {\n          return 'rate limited';\n        }\n      } else {\n        callback();\n      }\n    } else {\n      this.sendBuffer.push(callback);\n    }\n  }\n  /**\n   * Sets the JWT access token used for channel subscription authorization and Realtime RLS.\n   *\n   * @param token A JWT string.\n   */\n\n\n  setAuth(token) {\n    this.accessToken = token;\n    this.channels.forEach(channel => {\n      token && channel.updateJoinPayload({\n        access_token: token\n      });\n\n      if (channel.joinedOnce && channel._isJoined()) {\n        channel._push(CHANNEL_EVENTS.access_token, {\n          access_token: token\n        });\n      }\n    });\n  }\n  /**\n   * Return the next message ref, accounting for overflows\n   *\n   * @internal\n   */\n\n\n  _makeRef() {\n    let newRef = this.ref + 1;\n\n    if (newRef === this.ref) {\n      this.ref = 0;\n    } else {\n      this.ref = newRef;\n    }\n\n    return this.ref.toString();\n  }\n  /**\n   * Unsubscribe from channels with the specified topic.\n   *\n   * @internal\n   */\n\n\n  _leaveOpenTopic(topic) {\n    let dupChannel = this.channels.find(c => c.topic === topic && (c._isJoined() || c._isJoining()));\n\n    if (dupChannel) {\n      this.log('transport', `leaving duplicate topic \"${topic}\"`);\n      dupChannel.unsubscribe();\n    }\n  }\n  /**\n   * Removes a subscription from the socket.\n   *\n   * @param channel An open subscription.\n   *\n   * @internal\n   */\n\n\n  _remove(channel) {\n    this.channels = this.channels.filter(c => c._joinRef() !== channel._joinRef());\n  }\n  /**\n   * Returns the URL of the websocket.\n   *\n   * @internal\n   */\n\n\n  _endPointURL() {\n    return this._appendParams(this.endPoint, Object.assign({}, this.params, {\n      vsn: VSN\n    }));\n  }\n  /** @internal */\n\n\n  _onConnMessage(rawMessage) {\n    this.decode(rawMessage.data, msg => {\n      let {\n        topic,\n        event,\n        payload,\n        ref\n      } = msg;\n\n      if (ref && ref === this.pendingHeartbeatRef || event === (payload === null || payload === void 0 ? void 0 : payload.type)) {\n        this.pendingHeartbeatRef = null;\n      }\n\n      this.log('receive', `${payload.status || ''} ${topic} ${event} ${ref && '(' + ref + ')' || ''}`, payload);\n      this.channels.filter(channel => channel._isMember(topic)).forEach(channel => channel._trigger(event, payload, ref));\n      this.stateChangeCallbacks.message.forEach(callback => callback(msg));\n    });\n  }\n  /** @internal */\n\n\n  _onConnOpen() {\n    this.log('transport', `connected to ${this._endPointURL()}`);\n\n    this._flushSendBuffer();\n\n    this.reconnectTimer.reset();\n    this.heartbeatTimer && clearInterval(this.heartbeatTimer);\n    this.heartbeatTimer = setInterval(() => this._sendHeartbeat(), this.heartbeatIntervalMs);\n    this.stateChangeCallbacks.open.forEach(callback => callback());\n  }\n  /** @internal */\n\n\n  _onConnClose(event) {\n    this.log('transport', 'close', event);\n\n    this._triggerChanError();\n\n    this.heartbeatTimer && clearInterval(this.heartbeatTimer);\n    this.reconnectTimer.scheduleTimeout();\n    this.stateChangeCallbacks.close.forEach(callback => callback(event));\n  }\n  /** @internal */\n\n\n  _onConnError(error) {\n    this.log('transport', error.message);\n\n    this._triggerChanError();\n\n    this.stateChangeCallbacks.error.forEach(callback => callback(error));\n  }\n  /** @internal */\n\n\n  _triggerChanError() {\n    this.channels.forEach(channel => channel._trigger(CHANNEL_EVENTS.error));\n  }\n  /** @internal */\n\n\n  _appendParams(url, params) {\n    if (Object.keys(params).length === 0) {\n      return url;\n    }\n\n    const prefix = url.match(/\\?/) ? '&' : '?';\n    const query = new URLSearchParams(params);\n    return `${url}${prefix}${query}`;\n  }\n  /** @internal */\n\n\n  _flushSendBuffer() {\n    if (this.isConnected() && this.sendBuffer.length > 0) {\n      this.sendBuffer.forEach(callback => callback());\n      this.sendBuffer = [];\n    }\n  }\n  /** @internal */\n\n\n  _sendHeartbeat() {\n    var _a;\n\n    if (!this.isConnected()) {\n      return;\n    }\n\n    if (this.pendingHeartbeatRef) {\n      this.pendingHeartbeatRef = null;\n      this.log('transport', 'heartbeat timeout. Attempting to re-establish connection');\n      (_a = this.conn) === null || _a === void 0 ? void 0 : _a.close(WS_CLOSE_NORMAL, 'hearbeat timeout');\n      return;\n    }\n\n    this.pendingHeartbeatRef = this._makeRef();\n    this.push({\n      topic: 'phoenix',\n      event: 'heartbeat',\n      payload: {},\n      ref: this.pendingHeartbeatRef\n    });\n    this.setAuth(this.accessToken);\n  }\n  /** @internal */\n\n\n  _throttle(callback) {\n    let eventsPerSecondLimit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.eventsPerSecondLimitMs;\n    return () => {\n      if (this.inThrottle) return true;\n      callback();\n      this.inThrottle = true;\n      setTimeout(() => {\n        this.inThrottle = false;\n      }, eventsPerSecondLimit);\n      return false;\n    };\n  }\n\n}","map":{"version":3,"mappings":"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","names":["w3cwebsocket","VSN","CHANNEL_EVENTS","TRANSPORTS","SOCKET_STATES","DEFAULT_TIMEOUT","WS_CLOSE_NORMAL","DEFAULT_HEADERS","CONNECTION_STATE","Timer","Serializer","RealtimeChannel","noop","RealtimeClient","constructor","endPoint","options","undefined","open","close","error","message","websocket","params","headers","Object","timeout","logger","transport","heartbeatIntervalMs","eventsPerSecond","_a","eventsPerSecondLimitMs","Math","floor","reconnectAfterMs","tries","encode","payload","callback","JSON","stringify","decode","serializer","bind","reconnectTimer","__awaiter","disconnect","connect","conn","_endPointURL","binaryType","onopen","_onConnOpen","onerror","_onConnError","onmessage","event","_onConnMessage","onclose","_onConnClose","code","reason","heartbeatTimer","clearInterval","reset","getChannels","channels","removeChannel","channel","unsubscribe","then","status","length","removeAllChannels","Promise","all","map","values","log","kind","msg","data","connectionState","readyState","connecting","Connecting","Open","closing","Closing","Closed","isConnected","topic","config","chan","push","ref","result","send","includes","isThrottled","_throttle","sendBuffer","setAuth","token","accessToken","forEach","updateJoinPayload","access_token","joinedOnce","_isJoined","_push","_makeRef","newRef","toString","_leaveOpenTopic","dupChannel","find","c","_isJoining","_remove","filter","_joinRef","_appendParams","assign","vsn","rawMessage","pendingHeartbeatRef","type","_isMember","_trigger","stateChangeCallbacks","_flushSendBuffer","setInterval","_sendHeartbeat","_triggerChanError","scheduleTimeout","url","keys","prefix","match","query","URLSearchParams","eventsPerSecondLimit","inThrottle","setTimeout"],"sources":["D:\\Documenti\\GitHub\\ZooGames\\application\\frontend\\node_modules\\@supabase\\realtime-js\\src\\RealtimeClient.ts"],"sourcesContent":["import { w3cwebsocket } from 'websocket'\nimport {\n  VSN,\n  CHANNEL_EVENTS,\n  TRANSPORTS,\n  SOCKET_STATES,\n  DEFAULT_TIMEOUT,\n  WS_CLOSE_NORMAL,\n  DEFAULT_HEADERS,\n  CONNECTION_STATE,\n} from './lib/constants'\nimport Timer from './lib/timer'\nimport Serializer from './lib/serializer'\nimport RealtimeChannel, { RealtimeChannelOptions } from './RealtimeChannel'\n\nexport type RealtimeClientOptions = {\n  transport?: WebSocket\n  timeout?: number\n  heartbeatIntervalMs?: number\n  logger?: Function\n  encode?: Function\n  decode?: Function\n  reconnectAfterMs?: Function\n  headers?: { [key: string]: string }\n  params?: { [key: string]: any }\n}\n\nexport type RealtimeMessage = {\n  topic: string\n  event: string\n  payload: any\n  ref: string\n  join_ref?: string\n}\n\nexport type RealtimeRemoveChannelResponse = 'ok' | 'timed out' | 'error'\n\nconst noop = () => {}\n\nexport default class RealtimeClient {\n  accessToken: string | null = null\n  channels: RealtimeChannel[] = []\n  endPoint: string = ''\n  headers?: { [key: string]: string } = DEFAULT_HEADERS\n  params?: { [key: string]: string } = {}\n  timeout: number = DEFAULT_TIMEOUT\n  transport: any = w3cwebsocket\n  heartbeatIntervalMs: number = 30000\n  heartbeatTimer: ReturnType<typeof setInterval> | undefined = undefined\n  pendingHeartbeatRef: string | null = null\n  ref: number = 0\n  reconnectTimer: Timer\n  logger: Function = noop\n  encode: Function\n  decode: Function\n  reconnectAfterMs: Function\n  conn: WebSocket | null = null\n  sendBuffer: Function[] = []\n  serializer: Serializer = new Serializer()\n  stateChangeCallbacks: {\n    open: Function[]\n    close: Function[]\n    error: Function[]\n    message: Function[]\n  } = {\n    open: [],\n    close: [],\n    error: [],\n    message: [],\n  }\n  eventsPerSecondLimitMs: number = 100\n  inThrottle: boolean = false\n\n  /**\n   * Initializes the Socket.\n   *\n   * @param endPoint The string WebSocket endpoint, ie, \"ws://example.com/socket\", \"wss://example.com\", \"/socket\" (inherited host & protocol)\n   * @param options.transport The Websocket Transport, for example WebSocket.\n   * @param options.timeout The default timeout in milliseconds to trigger push timeouts.\n   * @param options.params The optional params to pass when connecting.\n   * @param options.headers The optional headers to pass when connecting.\n   * @param options.heartbeatIntervalMs The millisec interval to send a heartbeat message.\n   * @param options.logger The optional function for specialized logging, ie: logger: (kind, msg, data) => { console.log(`${kind}: ${msg}`, data) }\n   * @param options.encode The function to encode outgoing messages. Defaults to JSON: (payload, callback) => callback(JSON.stringify(payload))\n   * @param options.decode The function to decode incoming messages. Defaults to Serializer's decode.\n   * @param options.reconnectAfterMs he optional function that returns the millsec reconnect interval. Defaults to stepped backoff off.\n   */\n  constructor(endPoint: string, options?: RealtimeClientOptions) {\n    this.endPoint = `${endPoint}/${TRANSPORTS.websocket}`\n\n    if (options?.params) this.params = options.params\n    if (options?.headers) this.headers = { ...this.headers, ...options.headers }\n    if (options?.timeout) this.timeout = options.timeout\n    if (options?.logger) this.logger = options.logger\n    if (options?.transport) this.transport = options.transport\n    if (options?.heartbeatIntervalMs)\n      this.heartbeatIntervalMs = options.heartbeatIntervalMs\n\n    const eventsPerSecond = options?.params?.eventsPerSecond\n    if (eventsPerSecond)\n      this.eventsPerSecondLimitMs = Math.floor(1000 / eventsPerSecond)\n\n    this.reconnectAfterMs = options?.reconnectAfterMs\n      ? options.reconnectAfterMs\n      : (tries: number) => {\n          return [1000, 2000, 5000, 10000][tries - 1] || 10000\n        }\n    this.encode = options?.encode\n      ? options.encode\n      : (payload: JSON, callback: Function) => {\n          return callback(JSON.stringify(payload))\n        }\n    this.decode = options?.decode\n      ? options.decode\n      : this.serializer.decode.bind(this.serializer)\n    this.reconnectTimer = new Timer(async () => {\n      this.disconnect()\n      this.connect()\n    }, this.reconnectAfterMs)\n  }\n\n  /**\n   * Connects the socket, unless already connected.\n   */\n  connect(): void {\n    if (this.conn) {\n      return\n    }\n\n    this.conn = new this.transport(this._endPointURL(), [], null, this.headers)\n\n    if (this.conn) {\n      this.conn.binaryType = 'arraybuffer'\n      this.conn.onopen = () => this._onConnOpen()\n      this.conn.onerror = (error) => this._onConnError(error as ErrorEvent)\n      this.conn.onmessage = (event) => this._onConnMessage(event)\n      this.conn.onclose = (event) => this._onConnClose(event)\n    }\n  }\n\n  /**\n   * Disconnects the socket.\n   *\n   * @param code A numeric status code to send on disconnect.\n   * @param reason A custom reason for the disconnect.\n   */\n  disconnect(code?: number, reason?: string): void {\n    if (this.conn) {\n      this.conn.onclose = function () {} // noop\n      if (code) {\n        this.conn.close(code, reason ?? '')\n      } else {\n        this.conn.close()\n      }\n      this.conn = null\n      // remove open handles\n      this.heartbeatTimer && clearInterval(this.heartbeatTimer)\n      this.reconnectTimer.reset()\n    }\n  }\n\n  getChannels(): RealtimeChannel[] {\n    return this.channels\n  }\n\n  removeChannel(\n    channel: RealtimeChannel\n  ): Promise<RealtimeRemoveChannelResponse> {\n    return channel.unsubscribe().then((status) => {\n      if (this.channels.length === 0) {\n        this.disconnect()\n      }\n      return status\n    })\n  }\n\n  removeAllChannels(): Promise<RealtimeRemoveChannelResponse[]> {\n    return Promise.all(\n      this.channels.map((channel) => channel.unsubscribe())\n    ).then((values) => {\n      this.disconnect()\n      return values\n    })\n  }\n\n  /**\n   * Logs the message.\n   *\n   * For customized logging, `this.logger` can be overriden.\n   */\n  log(kind: string, msg: string, data?: any) {\n    this.logger(kind, msg, data)\n  }\n\n  /**\n   * Returns the current state of the socket.\n   */\n  connectionState(): CONNECTION_STATE {\n    switch (this.conn && this.conn.readyState) {\n      case SOCKET_STATES.connecting:\n        return CONNECTION_STATE.Connecting\n      case SOCKET_STATES.open:\n        return CONNECTION_STATE.Open\n      case SOCKET_STATES.closing:\n        return CONNECTION_STATE.Closing\n      default:\n        return CONNECTION_STATE.Closed\n    }\n  }\n\n  /**\n   * Retuns `true` is the connection is open.\n   */\n  isConnected(): boolean {\n    return this.connectionState() === CONNECTION_STATE.Open\n  }\n\n  channel(\n    topic: string,\n    params: RealtimeChannelOptions = { config: {} }\n  ): RealtimeChannel {\n    if (!this.isConnected()) {\n      this.connect()\n    }\n\n    const chan = new RealtimeChannel(`realtime:${topic}`, params, this)\n    this.channels.push(chan)\n    return chan\n  }\n\n  /**\n   * Push out a message if the socket is connected.\n   *\n   * If the socket is not connected, the message gets enqueued within a local buffer, and sent out when a connection is next established.\n   */\n  push(data: RealtimeMessage): 'rate limited' | void {\n    const { topic, event, payload, ref } = data\n    let callback = () => {\n      this.encode(data, (result: any) => {\n        this.conn?.send(result)\n      })\n    }\n    this.log('push', `${topic} ${event} (${ref})`, payload)\n    if (this.isConnected()) {\n      if (['broadcast', 'presence', 'postgres_changes'].includes(event)) {\n        const isThrottled = this._throttle(callback)()\n        if (isThrottled) {\n          return 'rate limited'\n        }\n      } else {\n        callback()\n      }\n    } else {\n      this.sendBuffer.push(callback)\n    }\n  }\n\n  /**\n   * Sets the JWT access token used for channel subscription authorization and Realtime RLS.\n   *\n   * @param token A JWT string.\n   */\n  setAuth(token: string | null): void {\n    this.accessToken = token\n\n    this.channels.forEach((channel) => {\n      token && channel.updateJoinPayload({ access_token: token })\n\n      if (channel.joinedOnce && channel._isJoined()) {\n        channel._push(CHANNEL_EVENTS.access_token, { access_token: token })\n      }\n    })\n  }\n\n  /**\n   * Return the next message ref, accounting for overflows\n   *\n   * @internal\n   */\n  _makeRef(): string {\n    let newRef = this.ref + 1\n    if (newRef === this.ref) {\n      this.ref = 0\n    } else {\n      this.ref = newRef\n    }\n\n    return this.ref.toString()\n  }\n\n  /**\n   * Unsubscribe from channels with the specified topic.\n   *\n   * @internal\n   */\n  _leaveOpenTopic(topic: string): void {\n    let dupChannel = this.channels.find(\n      (c) => c.topic === topic && (c._isJoined() || c._isJoining())\n    )\n    if (dupChannel) {\n      this.log('transport', `leaving duplicate topic \"${topic}\"`)\n      dupChannel.unsubscribe()\n    }\n  }\n\n  /**\n   * Removes a subscription from the socket.\n   *\n   * @param channel An open subscription.\n   *\n   * @internal\n   */\n  _remove(channel: RealtimeChannel) {\n    this.channels = this.channels.filter(\n      (c: RealtimeChannel) => c._joinRef() !== channel._joinRef()\n    )\n  }\n\n  /**\n   * Returns the URL of the websocket.\n   *\n   * @internal\n   */\n  private _endPointURL(): string {\n    return this._appendParams(\n      this.endPoint,\n      Object.assign({}, this.params, { vsn: VSN })\n    )\n  }\n\n  /** @internal */\n  private _onConnMessage(rawMessage: { data: any }) {\n    this.decode(rawMessage.data, (msg: RealtimeMessage) => {\n      let { topic, event, payload, ref } = msg\n\n      if (\n        (ref && ref === this.pendingHeartbeatRef) ||\n        event === payload?.type\n      ) {\n        this.pendingHeartbeatRef = null\n      }\n\n      this.log(\n        'receive',\n        `${payload.status || ''} ${topic} ${event} ${\n          (ref && '(' + ref + ')') || ''\n        }`,\n        payload\n      )\n      this.channels\n        .filter((channel: RealtimeChannel) => channel._isMember(topic))\n        .forEach((channel: RealtimeChannel) =>\n          channel._trigger(event, payload, ref)\n        )\n      this.stateChangeCallbacks.message.forEach((callback) => callback(msg))\n    })\n  }\n\n  /** @internal */\n  private _onConnOpen() {\n    this.log('transport', `connected to ${this._endPointURL()}`)\n    this._flushSendBuffer()\n    this.reconnectTimer.reset()\n    this.heartbeatTimer && clearInterval(this.heartbeatTimer)\n    this.heartbeatTimer = setInterval(\n      () => this._sendHeartbeat(),\n      this.heartbeatIntervalMs\n    )\n    this.stateChangeCallbacks.open.forEach((callback) => callback())!\n  }\n\n  /** @internal */\n  private _onConnClose(event: any) {\n    this.log('transport', 'close', event)\n    this._triggerChanError()\n    this.heartbeatTimer && clearInterval(this.heartbeatTimer)\n    this.reconnectTimer.scheduleTimeout()\n    this.stateChangeCallbacks.close.forEach((callback) => callback(event))\n  }\n\n  /** @internal */\n  private _onConnError(error: ErrorEvent) {\n    this.log('transport', error.message)\n    this._triggerChanError()\n    this.stateChangeCallbacks.error.forEach((callback) => callback(error))\n  }\n\n  /** @internal */\n  private _triggerChanError() {\n    this.channels.forEach((channel: RealtimeChannel) =>\n      channel._trigger(CHANNEL_EVENTS.error)\n    )\n  }\n\n  /** @internal */\n  private _appendParams(\n    url: string,\n    params: { [key: string]: string }\n  ): string {\n    if (Object.keys(params).length === 0) {\n      return url\n    }\n    const prefix = url.match(/\\?/) ? '&' : '?'\n    const query = new URLSearchParams(params)\n\n    return `${url}${prefix}${query}`\n  }\n\n  /** @internal */\n  private _flushSendBuffer() {\n    if (this.isConnected() && this.sendBuffer.length > 0) {\n      this.sendBuffer.forEach((callback) => callback())\n      this.sendBuffer = []\n    }\n  }\n  /** @internal */\n  private _sendHeartbeat() {\n    if (!this.isConnected()) {\n      return\n    }\n    if (this.pendingHeartbeatRef) {\n      this.pendingHeartbeatRef = null\n      this.log(\n        'transport',\n        'heartbeat timeout. Attempting to re-establish connection'\n      )\n      this.conn?.close(WS_CLOSE_NORMAL, 'hearbeat timeout')\n      return\n    }\n    this.pendingHeartbeatRef = this._makeRef()\n    this.push({\n      topic: 'phoenix',\n      event: 'heartbeat',\n      payload: {},\n      ref: this.pendingHeartbeatRef,\n    })\n    this.setAuth(this.accessToken)\n  }\n\n  /** @internal */\n  private _throttle(\n    callback: Function,\n    eventsPerSecondLimit: number = this.eventsPerSecondLimitMs\n  ): () => boolean {\n    return () => {\n      if (this.inThrottle) return true\n      callback()\n      this.inThrottle = true\n      setTimeout(() => {\n        this.inThrottle = false\n      }, eventsPerSecondLimit)\n      return false\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}