{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { CHANNEL_EVENTS, CHANNEL_STATES } from './lib/constants';\nimport Push from './lib/push';\nimport Timer from './lib/timer';\nimport RealtimePresence from './RealtimePresence';\nimport * as Transformers from './lib/transformers';\nexport var REALTIME_POSTGRES_CHANGES_LISTEN_EVENT;\n\n(function (REALTIME_POSTGRES_CHANGES_LISTEN_EVENT) {\n  REALTIME_POSTGRES_CHANGES_LISTEN_EVENT[\"ALL\"] = \"*\";\n  REALTIME_POSTGRES_CHANGES_LISTEN_EVENT[\"INSERT\"] = \"INSERT\";\n  REALTIME_POSTGRES_CHANGES_LISTEN_EVENT[\"UPDATE\"] = \"UPDATE\";\n  REALTIME_POSTGRES_CHANGES_LISTEN_EVENT[\"DELETE\"] = \"DELETE\";\n})(REALTIME_POSTGRES_CHANGES_LISTEN_EVENT || (REALTIME_POSTGRES_CHANGES_LISTEN_EVENT = {}));\n\nexport var REALTIME_LISTEN_TYPES;\n\n(function (REALTIME_LISTEN_TYPES) {\n  REALTIME_LISTEN_TYPES[\"BROADCAST\"] = \"broadcast\";\n  REALTIME_LISTEN_TYPES[\"PRESENCE\"] = \"presence\";\n  REALTIME_LISTEN_TYPES[\"POSTGRES_CHANGES\"] = \"postgres_changes\";\n})(REALTIME_LISTEN_TYPES || (REALTIME_LISTEN_TYPES = {}));\n\nexport var REALTIME_SUBSCRIBE_STATES;\n\n(function (REALTIME_SUBSCRIBE_STATES) {\n  REALTIME_SUBSCRIBE_STATES[\"SUBSCRIBED\"] = \"SUBSCRIBED\";\n  REALTIME_SUBSCRIBE_STATES[\"TIMED_OUT\"] = \"TIMED_OUT\";\n  REALTIME_SUBSCRIBE_STATES[\"CLOSED\"] = \"CLOSED\";\n  REALTIME_SUBSCRIBE_STATES[\"CHANNEL_ERROR\"] = \"CHANNEL_ERROR\";\n})(REALTIME_SUBSCRIBE_STATES || (REALTIME_SUBSCRIBE_STATES = {}));\n/** A channel is the basic building block of Realtime\n * and narrows the scope of data flow to subscribed clients.\n * You can think of a channel as a chatroom where participants are able to see who's online\n * and send and receive messages.\n **/\n\n\nexport default class RealtimeChannel {\n  constructor(\n  /** Topic name can be any string. */\n  topic) {\n    let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      config: {}\n    };\n    let socket = arguments.length > 2 ? arguments[2] : undefined;\n    this.topic = topic;\n    this.params = params;\n    this.socket = socket;\n    this.bindings = {};\n    this.state = CHANNEL_STATES.closed;\n    this.joinedOnce = false;\n    this.pushBuffer = [];\n    this.params.config = Object.assign({\n      broadcast: {\n        ack: false,\n        self: false\n      },\n      presence: {\n        key: ''\n      }\n    }, params.config);\n    this.timeout = this.socket.timeout;\n    this.joinPush = new Push(this, CHANNEL_EVENTS.join, this.params, this.timeout);\n    this.rejoinTimer = new Timer(() => this._rejoinUntilConnected(), this.socket.reconnectAfterMs);\n    this.joinPush.receive('ok', () => {\n      this.state = CHANNEL_STATES.joined;\n      this.rejoinTimer.reset();\n      this.pushBuffer.forEach(pushEvent => pushEvent.send());\n      this.pushBuffer = [];\n    });\n\n    this._onClose(() => {\n      this.rejoinTimer.reset();\n      this.socket.log('channel', `close ${this.topic} ${this._joinRef()}`);\n      this.state = CHANNEL_STATES.closed;\n\n      this.socket._remove(this);\n    });\n\n    this._onError(reason => {\n      if (this._isLeaving() || this._isClosed()) {\n        return;\n      }\n\n      this.socket.log('channel', `error ${this.topic}`, reason);\n      this.state = CHANNEL_STATES.errored;\n      this.rejoinTimer.scheduleTimeout();\n    });\n\n    this.joinPush.receive('timeout', () => {\n      if (!this._isJoining()) {\n        return;\n      }\n\n      this.socket.log('channel', `timeout ${this.topic}`, this.joinPush.timeout);\n      this.state = CHANNEL_STATES.errored;\n      this.rejoinTimer.scheduleTimeout();\n    });\n\n    this._on(CHANNEL_EVENTS.reply, {}, (payload, ref) => {\n      this._trigger(this._replyEventName(ref), payload);\n    });\n\n    this.presence = new RealtimePresence(this);\n  }\n  /** Subscribe registers your client with the server */\n\n\n  subscribe(callback) {\n    let timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.timeout;\n\n    var _a, _b;\n\n    if (this.joinedOnce) {\n      throw `tried to subscribe multiple times. 'subscribe' can only be called a single time per channel instance`;\n    } else {\n      const {\n        config: {\n          broadcast,\n          presence\n        }\n      } = this.params;\n\n      this._onError(e => callback && callback('CHANNEL_ERROR', e));\n\n      this._onClose(() => callback && callback('CLOSED'));\n\n      const accessTokenPayload = {};\n      const config = {\n        broadcast,\n        presence,\n        postgres_changes: (_b = (_a = this.bindings.postgres_changes) === null || _a === void 0 ? void 0 : _a.map(r => r.filter)) !== null && _b !== void 0 ? _b : []\n      };\n\n      if (this.socket.accessToken) {\n        accessTokenPayload.access_token = this.socket.accessToken;\n      }\n\n      this.updateJoinPayload(Object.assign({\n        config\n      }, accessTokenPayload));\n      this.joinedOnce = true;\n\n      this._rejoin(timeout);\n\n      this.joinPush.receive('ok', _ref2 => {\n        let {\n          postgres_changes: serverPostgresFilters\n        } = _ref2;\n\n        var _a;\n\n        this.socket.accessToken && this.socket.setAuth(this.socket.accessToken);\n\n        if (serverPostgresFilters === undefined) {\n          callback && callback('SUBSCRIBED');\n          return;\n        } else {\n          const clientPostgresBindings = this.bindings.postgres_changes;\n          const bindingsLen = (_a = clientPostgresBindings === null || clientPostgresBindings === void 0 ? void 0 : clientPostgresBindings.length) !== null && _a !== void 0 ? _a : 0;\n          const newPostgresBindings = [];\n\n          for (let i = 0; i < bindingsLen; i++) {\n            const clientPostgresBinding = clientPostgresBindings[i];\n            const {\n              filter: {\n                event,\n                schema,\n                table,\n                filter\n              }\n            } = clientPostgresBinding;\n            const serverPostgresFilter = serverPostgresFilters && serverPostgresFilters[i];\n\n            if (serverPostgresFilter && serverPostgresFilter.event === event && serverPostgresFilter.schema === schema && serverPostgresFilter.table === table && serverPostgresFilter.filter === filter) {\n              newPostgresBindings.push(Object.assign(Object.assign({}, clientPostgresBinding), {\n                id: serverPostgresFilter.id\n              }));\n            } else {\n              this.unsubscribe();\n              callback && callback('CHANNEL_ERROR', new Error('mismatch between server and client bindings for postgres changes'));\n              return;\n            }\n          }\n\n          this.bindings.postgres_changes = newPostgresBindings;\n          callback && callback('SUBSCRIBED');\n          return;\n        }\n      }).receive('error', error => {\n        callback && callback('CHANNEL_ERROR', new Error(JSON.stringify(Object.values(error).join(', ') || 'error')));\n        return;\n      }).receive('timeout', () => {\n        callback && callback('TIMED_OUT');\n        return;\n      });\n    }\n\n    return this;\n  }\n\n  presenceState() {\n    return this.presence.state;\n  }\n\n  track(payload) {\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return __awaiter(this, void 0, void 0, function* () {\n      return yield this.send({\n        type: 'presence',\n        event: 'track',\n        payload\n      }, opts.timeout || this.timeout);\n    });\n  }\n\n  untrack() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return __awaiter(this, void 0, void 0, function* () {\n      return yield this.send({\n        type: 'presence',\n        event: 'untrack'\n      }, opts);\n    });\n  }\n\n  on(type, filter, callback) {\n    return this._on(type, filter, callback);\n  }\n\n  send(payload) {\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return new Promise(resolve => {\n      var _a, _b, _c;\n\n      const push = this._push(payload.type, payload, opts.timeout || this.timeout);\n\n      if (push.rateLimited) {\n        resolve('rate limited');\n      }\n\n      if (payload.type === 'broadcast' && !((_c = (_b = (_a = this.params) === null || _a === void 0 ? void 0 : _a.config) === null || _b === void 0 ? void 0 : _b.broadcast) === null || _c === void 0 ? void 0 : _c.ack)) {\n        resolve('ok');\n      }\n\n      push.receive('ok', () => resolve('ok'));\n      push.receive('timeout', () => resolve('timed out'));\n    });\n  }\n\n  updateJoinPayload(payload) {\n    this.joinPush.updatePayload(payload);\n  }\n  /**\n   * Leaves the channel.\n   *\n   * Unsubscribes from server events, and instructs channel to terminate on server.\n   * Triggers onClose() hooks.\n   *\n   * To receive leave acknowledgements, use the a `receive` hook to bind to the server ack, ie:\n   * channel.unsubscribe().receive(\"ok\", () => alert(\"left!\") )\n   */\n\n\n  unsubscribe() {\n    let timeout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.timeout;\n    this.state = CHANNEL_STATES.leaving;\n\n    const onClose = () => {\n      this.socket.log('channel', `leave ${this.topic}`);\n\n      this._trigger(CHANNEL_EVENTS.close, 'leave', this._joinRef());\n    };\n\n    this.rejoinTimer.reset(); // Destroy joinPush to avoid connection timeouts during unscription phase\n\n    this.joinPush.destroy();\n    return new Promise(resolve => {\n      const leavePush = new Push(this, CHANNEL_EVENTS.leave, {}, timeout);\n      leavePush.receive('ok', () => {\n        onClose();\n        resolve('ok');\n      }).receive('timeout', () => {\n        onClose();\n        resolve('timed out');\n      }).receive('error', () => {\n        resolve('error');\n      });\n      leavePush.send();\n\n      if (!this._canPush()) {\n        leavePush.trigger('ok', {});\n      }\n    });\n  }\n  /** @internal */\n\n\n  _push(event, payload) {\n    let timeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.timeout;\n\n    if (!this.joinedOnce) {\n      throw `tried to push '${event}' to '${this.topic}' before joining. Use channel.subscribe() before pushing events`;\n    }\n\n    let pushEvent = new Push(this, event, payload, timeout);\n\n    if (this._canPush()) {\n      pushEvent.send();\n    } else {\n      pushEvent.startTimeout();\n      this.pushBuffer.push(pushEvent);\n    }\n\n    return pushEvent;\n  }\n  /**\n   * Overridable message hook\n   *\n   * Receives all events for specialized message handling before dispatching to the channel callbacks.\n   * Must return the payload, modified or unmodified.\n   *\n   * @internal\n   */\n\n\n  _onMessage(_event, payload, _ref) {\n    return payload;\n  }\n  /** @internal */\n\n\n  _isMember(topic) {\n    return this.topic === topic;\n  }\n  /** @internal */\n\n\n  _joinRef() {\n    return this.joinPush.ref;\n  }\n  /** @internal */\n\n\n  _trigger(type, payload, ref) {\n    var _a, _b;\n\n    const typeLower = type.toLocaleLowerCase();\n    const {\n      close,\n      error,\n      leave,\n      join\n    } = CHANNEL_EVENTS;\n    const events = [close, error, leave, join];\n\n    if (ref && events.indexOf(typeLower) >= 0 && ref !== this._joinRef()) {\n      return;\n    }\n\n    let handledPayload = this._onMessage(typeLower, payload, ref);\n\n    if (payload && !handledPayload) {\n      throw 'channel onMessage callbacks must return the payload, modified or unmodified';\n    }\n\n    if (['insert', 'update', 'delete'].includes(typeLower)) {\n      (_a = this.bindings.postgres_changes) === null || _a === void 0 ? void 0 : _a.filter(bind => {\n        var _a, _b, _c;\n\n        return ((_a = bind.filter) === null || _a === void 0 ? void 0 : _a.event) === '*' || ((_c = (_b = bind.filter) === null || _b === void 0 ? void 0 : _b.event) === null || _c === void 0 ? void 0 : _c.toLocaleLowerCase()) === typeLower;\n      }).map(bind => bind.callback(handledPayload, ref));\n    } else {\n      (_b = this.bindings[typeLower]) === null || _b === void 0 ? void 0 : _b.filter(bind => {\n        var _a, _b, _c, _d, _e, _f;\n\n        if (['broadcast', 'presence', 'postgres_changes'].includes(typeLower)) {\n          if ('id' in bind) {\n            const bindId = bind.id;\n            const bindEvent = (_a = bind.filter) === null || _a === void 0 ? void 0 : _a.event;\n            return bindId && ((_b = payload.ids) === null || _b === void 0 ? void 0 : _b.includes(bindId)) && (bindEvent === '*' || (bindEvent === null || bindEvent === void 0 ? void 0 : bindEvent.toLocaleLowerCase()) === ((_c = payload.data) === null || _c === void 0 ? void 0 : _c.type.toLocaleLowerCase()));\n          } else {\n            const bindEvent = (_e = (_d = bind === null || bind === void 0 ? void 0 : bind.filter) === null || _d === void 0 ? void 0 : _d.event) === null || _e === void 0 ? void 0 : _e.toLocaleLowerCase();\n            return bindEvent === '*' || bindEvent === ((_f = payload === null || payload === void 0 ? void 0 : payload.event) === null || _f === void 0 ? void 0 : _f.toLocaleLowerCase());\n          }\n        } else {\n          return bind.type.toLocaleLowerCase() === typeLower;\n        }\n      }).map(bind => {\n        if (typeof handledPayload === 'object' && 'ids' in handledPayload) {\n          const postgresChanges = handledPayload.data;\n          const {\n            schema,\n            table,\n            commit_timestamp,\n            type,\n            errors\n          } = postgresChanges;\n          const enrichedPayload = {\n            schema: schema,\n            table: table,\n            commit_timestamp: commit_timestamp,\n            eventType: type,\n            new: {},\n            old: {},\n            errors: errors\n          };\n          handledPayload = Object.assign(Object.assign({}, enrichedPayload), this._getPayloadRecords(postgresChanges));\n        }\n\n        bind.callback(handledPayload, ref);\n      });\n    }\n  }\n  /** @internal */\n\n\n  _isClosed() {\n    return this.state === CHANNEL_STATES.closed;\n  }\n  /** @internal */\n\n\n  _isJoined() {\n    return this.state === CHANNEL_STATES.joined;\n  }\n  /** @internal */\n\n\n  _isJoining() {\n    return this.state === CHANNEL_STATES.joining;\n  }\n  /** @internal */\n\n\n  _isLeaving() {\n    return this.state === CHANNEL_STATES.leaving;\n  }\n  /** @internal */\n\n\n  _replyEventName(ref) {\n    return `chan_reply_${ref}`;\n  }\n  /** @internal */\n\n\n  _on(type, filter, callback) {\n    const typeLower = type.toLocaleLowerCase();\n    const binding = {\n      type: typeLower,\n      filter: filter,\n      callback: callback\n    };\n\n    if (this.bindings[typeLower]) {\n      this.bindings[typeLower].push(binding);\n    } else {\n      this.bindings[typeLower] = [binding];\n    }\n\n    return this;\n  }\n  /** @internal */\n\n\n  _off(type, filter) {\n    const typeLower = type.toLocaleLowerCase();\n    this.bindings[typeLower] = this.bindings[typeLower].filter(bind => {\n      var _a;\n\n      return !(((_a = bind.type) === null || _a === void 0 ? void 0 : _a.toLocaleLowerCase()) === typeLower && RealtimeChannel.isEqual(bind.filter, filter));\n    });\n    return this;\n  }\n  /** @internal */\n\n\n  static isEqual(obj1, obj2) {\n    if (Object.keys(obj1).length !== Object.keys(obj2).length) {\n      return false;\n    }\n\n    for (const k in obj1) {\n      if (obj1[k] !== obj2[k]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  /** @internal */\n\n\n  _rejoinUntilConnected() {\n    this.rejoinTimer.scheduleTimeout();\n\n    if (this.socket.isConnected()) {\n      this._rejoin();\n    }\n  }\n  /**\n   * Registers a callback that will be executed when the channel closes.\n   *\n   * @internal\n   */\n\n\n  _onClose(callback) {\n    this._on(CHANNEL_EVENTS.close, {}, callback);\n  }\n  /**\n   * Registers a callback that will be executed when the channel encounteres an error.\n   *\n   * @internal\n   */\n\n\n  _onError(callback) {\n    this._on(CHANNEL_EVENTS.error, {}, reason => callback(reason));\n  }\n  /**\n   * Returns `true` if the socket is connected and the channel has been joined.\n   *\n   * @internal\n   */\n\n\n  _canPush() {\n    return this.socket.isConnected() && this._isJoined();\n  }\n  /** @internal */\n\n\n  _rejoin() {\n    let timeout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.timeout;\n\n    if (this._isLeaving()) {\n      return;\n    }\n\n    this.socket._leaveOpenTopic(this.topic);\n\n    this.state = CHANNEL_STATES.joining;\n    this.joinPush.resend(timeout);\n  }\n  /** @internal */\n\n\n  _getPayloadRecords(payload) {\n    const records = {\n      new: {},\n      old: {}\n    };\n\n    if (payload.type === 'INSERT' || payload.type === 'UPDATE') {\n      records.new = Transformers.convertChangeData(payload.columns, payload.record);\n    }\n\n    if (payload.type === 'UPDATE' || payload.type === 'DELETE') {\n      records.old = Transformers.convertChangeData(payload.columns, payload.old_record);\n    }\n\n    return records;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["CHANNEL_EVENTS","CHANNEL_STATES","Push","Timer","RealtimePresence","Transformers","REALTIME_POSTGRES_CHANGES_LISTEN_EVENT","REALTIME_LISTEN_TYPES","REALTIME_SUBSCRIBE_STATES","RealtimeChannel","constructor","topic","params","config","socket","closed","Object","broadcast","ack","self","presence","key","timeout","joinPush","join","rejoinTimer","_rejoinUntilConnected","reconnectAfterMs","receive","state","joined","reset","pushBuffer","forEach","pushEvent","send","_onClose","log","_joinRef","_remove","_onError","reason","_isLeaving","_isClosed","errored","scheduleTimeout","_isJoining","_on","reply","payload","ref","_trigger","_replyEventName","subscribe","callback","joinedOnce","e","accessTokenPayload","postgres_changes","bindings","_a","map","r","filter","_b","accessToken","access_token","updateJoinPayload","_rejoin","serverPostgresFilters","setAuth","undefined","clientPostgresBindings","bindingsLen","length","newPostgresBindings","i","clientPostgresBinding","event","schema","table","serverPostgresFilter","push","id","unsubscribe","Error","error","JSON","stringify","values","presenceState","track","opts","type","untrack","on","Promise","resolve","_push","rateLimited","_c","updatePayload","leaving","onClose","close","destroy","leavePush","leave","_canPush","trigger","startTimeout","_onMessage","_event","_ref","_isMember","typeLower","toLocaleLowerCase","events","indexOf","handledPayload","includes","bind","bindId","bindEvent","ids","data","_d","_e","_f","postgresChanges","commit_timestamp","errors","enrichedPayload","eventType","new","old","_getPayloadRecords","_isJoined","joining","binding","_off","isEqual","obj1","obj2","keys","k","isConnected","_leaveOpenTopic","resend","records","convertChangeData","columns","record","old_record"],"sources":["D:\\Documenti\\GitHub\\ZooGames\\application\\frontend\\node_modules\\@supabase\\realtime-js\\src\\RealtimeChannel.ts"],"sourcesContent":["import { CHANNEL_EVENTS, CHANNEL_STATES } from './lib/constants'\nimport Push from './lib/push'\nimport RealtimeClient from './RealtimeClient'\nimport Timer from './lib/timer'\nimport RealtimePresence, {\n  RealtimePresenceJoinPayload,\n  RealtimePresenceLeavePayload,\n  RealtimePresenceState,\n  REALTIME_PRESENCE_LISTEN_EVENTS,\n} from './RealtimePresence'\nimport * as Transformers from './lib/transformers'\n\nexport type RealtimeChannelOptions = {\n  config: {\n    /**\n     * self option enables client to receive message it broadcast\n     * ack option instructs server to acknowlege that broadcast message was received\n     */\n    broadcast?: { self?: boolean; ack?: boolean }\n    /**\n     * key option is used to track presence payload across clients\n     */\n    presence?: { key?: string }\n  }\n}\n\ntype RealtimePostgresChangesPayloadBase = {\n  schema: string\n  table: string\n  commit_timestamp: string\n  errors: string[]\n}\n\nexport type RealtimePostgresInsertPayload<T extends { [key: string]: any }> =\n  RealtimePostgresChangesPayloadBase & {\n    eventType: `${REALTIME_POSTGRES_CHANGES_LISTEN_EVENT.INSERT}`\n    new: T\n    old: {}\n  }\n\nexport type RealtimePostgresUpdatePayload<T extends { [key: string]: any }> =\n  RealtimePostgresChangesPayloadBase & {\n    eventType: `${REALTIME_POSTGRES_CHANGES_LISTEN_EVENT.UPDATE}`\n    new: T\n    old: Partial<T>\n  }\n\nexport type RealtimePostgresDeletePayload<T extends { [key: string]: any }> =\n  RealtimePostgresChangesPayloadBase & {\n    eventType: `${REALTIME_POSTGRES_CHANGES_LISTEN_EVENT.DELETE}`\n    new: {}\n    old: Partial<T>\n  }\n\nexport type RealtimePostgresChangesPayload<T extends { [key: string]: any }> =\n  | RealtimePostgresInsertPayload<T>\n  | RealtimePostgresUpdatePayload<T>\n  | RealtimePostgresDeletePayload<T>\n\nexport type RealtimePostgresChangesFilter<T extends string> = {\n  event: T\n  schema: string\n  table?: string\n  filter?: string\n}\n\nexport type RealtimeChannelSendResponse = 'ok' | 'timed out' | 'rate limited'\n\nexport enum REALTIME_POSTGRES_CHANGES_LISTEN_EVENT {\n  ALL = '*',\n  INSERT = 'INSERT',\n  UPDATE = 'UPDATE',\n  DELETE = 'DELETE',\n}\n\nexport enum REALTIME_LISTEN_TYPES {\n  BROADCAST = 'broadcast',\n  PRESENCE = 'presence',\n  POSTGRES_CHANGES = 'postgres_changes',\n}\n\nexport enum REALTIME_SUBSCRIBE_STATES {\n  SUBSCRIBED = 'SUBSCRIBED',\n  TIMED_OUT = 'TIMED_OUT',\n  CLOSED = 'CLOSED',\n  CHANNEL_ERROR = 'CHANNEL_ERROR',\n}\n\n/** A channel is the basic building block of Realtime\n * and narrows the scope of data flow to subscribed clients.\n * You can think of a channel as a chatroom where participants are able to see who's online\n * and send and receive messages.\n **/\nexport default class RealtimeChannel {\n  bindings: {\n    [key: string]: {\n      type: string\n      filter: { [key: string]: any }\n      callback: Function\n      id?: string\n    }[]\n  } = {}\n  timeout: number\n  state = CHANNEL_STATES.closed\n  joinedOnce = false\n  joinPush: Push\n  rejoinTimer: Timer\n  pushBuffer: Push[] = []\n  presence: RealtimePresence\n\n  constructor(\n    /** Topic name can be any string. */\n    public topic: string,\n    public params: RealtimeChannelOptions = { config: {} },\n    public socket: RealtimeClient\n  ) {\n    this.params.config = {\n      ...{\n        broadcast: { ack: false, self: false },\n        presence: { key: '' },\n      },\n      ...params.config,\n    }\n    this.timeout = this.socket.timeout\n    this.joinPush = new Push(\n      this,\n      CHANNEL_EVENTS.join,\n      this.params,\n      this.timeout\n    )\n    this.rejoinTimer = new Timer(\n      () => this._rejoinUntilConnected(),\n      this.socket.reconnectAfterMs\n    )\n    this.joinPush.receive('ok', () => {\n      this.state = CHANNEL_STATES.joined\n      this.rejoinTimer.reset()\n      this.pushBuffer.forEach((pushEvent: Push) => pushEvent.send())\n      this.pushBuffer = []\n    })\n    this._onClose(() => {\n      this.rejoinTimer.reset()\n      this.socket.log('channel', `close ${this.topic} ${this._joinRef()}`)\n      this.state = CHANNEL_STATES.closed\n      this.socket._remove(this)\n    })\n    this._onError((reason: string) => {\n      if (this._isLeaving() || this._isClosed()) {\n        return\n      }\n      this.socket.log('channel', `error ${this.topic}`, reason)\n      this.state = CHANNEL_STATES.errored\n      this.rejoinTimer.scheduleTimeout()\n    })\n    this.joinPush.receive('timeout', () => {\n      if (!this._isJoining()) {\n        return\n      }\n      this.socket.log('channel', `timeout ${this.topic}`, this.joinPush.timeout)\n      this.state = CHANNEL_STATES.errored\n      this.rejoinTimer.scheduleTimeout()\n    })\n    this._on(CHANNEL_EVENTS.reply, {}, (payload: any, ref: string) => {\n      this._trigger(this._replyEventName(ref), payload)\n    })\n\n    this.presence = new RealtimePresence(this)\n  }\n\n  /** Subscribe registers your client with the server */\n  subscribe(\n    callback?: (status: `${REALTIME_SUBSCRIBE_STATES}`, err?: Error) => void,\n    timeout = this.timeout\n  ): RealtimeChannel {\n    if (this.joinedOnce) {\n      throw `tried to subscribe multiple times. 'subscribe' can only be called a single time per channel instance`\n    } else {\n      const {\n        config: { broadcast, presence },\n      } = this.params\n      this._onError((e: Error) => callback && callback('CHANNEL_ERROR', e))\n      this._onClose(() => callback && callback('CLOSED'))\n\n      const accessTokenPayload: { access_token?: string } = {}\n      const config = {\n        broadcast,\n        presence,\n        postgres_changes:\n          this.bindings.postgres_changes?.map((r) => r.filter) ?? [],\n      }\n\n      if (this.socket.accessToken) {\n        accessTokenPayload.access_token = this.socket.accessToken\n      }\n\n      this.updateJoinPayload({ ...{ config }, ...accessTokenPayload })\n\n      this.joinedOnce = true\n      this._rejoin(timeout)\n\n      this.joinPush\n        .receive(\n          'ok',\n          ({\n            postgres_changes: serverPostgresFilters,\n          }: {\n            postgres_changes: {\n              id: string\n              event: string\n              schema?: string\n              table?: string\n              filter?: string\n            }[]\n          }) => {\n            this.socket.accessToken &&\n              this.socket.setAuth(this.socket.accessToken)\n\n            if (serverPostgresFilters === undefined) {\n              callback && callback('SUBSCRIBED')\n              return\n            } else {\n              const clientPostgresBindings = this.bindings.postgres_changes\n              const bindingsLen = clientPostgresBindings?.length ?? 0\n              const newPostgresBindings = []\n\n              for (let i = 0; i < bindingsLen; i++) {\n                const clientPostgresBinding = clientPostgresBindings[i]\n                const {\n                  filter: { event, schema, table, filter },\n                } = clientPostgresBinding\n                const serverPostgresFilter =\n                  serverPostgresFilters && serverPostgresFilters[i]\n\n                if (\n                  serverPostgresFilter &&\n                  serverPostgresFilter.event === event &&\n                  serverPostgresFilter.schema === schema &&\n                  serverPostgresFilter.table === table &&\n                  serverPostgresFilter.filter === filter\n                ) {\n                  newPostgresBindings.push({\n                    ...clientPostgresBinding,\n                    id: serverPostgresFilter.id,\n                  })\n                } else {\n                  this.unsubscribe()\n                  callback &&\n                    callback(\n                      'CHANNEL_ERROR',\n                      new Error(\n                        'mismatch between server and client bindings for postgres changes'\n                      )\n                    )\n                  return\n                }\n              }\n\n              this.bindings.postgres_changes = newPostgresBindings\n\n              callback && callback('SUBSCRIBED')\n              return\n            }\n          }\n        )\n        .receive('error', (error: { [key: string]: any }) => {\n          callback &&\n            callback(\n              'CHANNEL_ERROR',\n              new Error(\n                JSON.stringify(Object.values(error).join(', ') || 'error')\n              )\n            )\n          return\n        })\n        .receive('timeout', () => {\n          callback && callback('TIMED_OUT')\n          return\n        })\n    }\n\n    return this\n  }\n\n  presenceState(): RealtimePresenceState {\n    return this.presence.state\n  }\n\n  async track(\n    payload: { [key: string]: any },\n    opts: { [key: string]: any } = {}\n  ): Promise<RealtimeChannelSendResponse> {\n    return await this.send(\n      {\n        type: 'presence',\n        event: 'track',\n        payload,\n      },\n      opts.timeout || this.timeout\n    )\n  }\n\n  async untrack(\n    opts: { [key: string]: any } = {}\n  ): Promise<RealtimeChannelSendResponse> {\n    return await this.send(\n      {\n        type: 'presence',\n        event: 'untrack',\n      },\n      opts\n    )\n  }\n\n  /** Listen to messages. */\n  on(\n    type: `${REALTIME_LISTEN_TYPES.BROADCAST}`,\n    filter: { event: string },\n    callback: (payload: {\n      type: `${REALTIME_LISTEN_TYPES.BROADCAST}`\n      event: string\n      [key: string]: any\n    }) => void\n  ): RealtimeChannel\n  on(\n    type: `${REALTIME_LISTEN_TYPES.PRESENCE}`,\n    filter: { event: `${REALTIME_PRESENCE_LISTEN_EVENTS.SYNC}` },\n    callback: () => void\n  ): RealtimeChannel\n  on(\n    type: `${REALTIME_LISTEN_TYPES.PRESENCE}`,\n    filter: { event: `${REALTIME_PRESENCE_LISTEN_EVENTS.JOIN}` },\n    callback: (payload: RealtimePresenceJoinPayload) => void\n  ): RealtimeChannel\n  on(\n    type: `${REALTIME_LISTEN_TYPES.PRESENCE}`,\n    filter: { event: `${REALTIME_PRESENCE_LISTEN_EVENTS.LEAVE}` },\n    callback: (payload: RealtimePresenceLeavePayload) => void\n  ): RealtimeChannel\n  on<T extends { [key: string]: any }>(\n    type: `${REALTIME_LISTEN_TYPES.POSTGRES_CHANGES}`,\n    filter: RealtimePostgresChangesFilter<`${REALTIME_POSTGRES_CHANGES_LISTEN_EVENT.ALL}`>,\n    callback: (payload: RealtimePostgresChangesPayload<T>) => void\n  ): RealtimeChannel\n  on<T extends { [key: string]: any }>(\n    type: `${REALTIME_LISTEN_TYPES.POSTGRES_CHANGES}`,\n    filter: RealtimePostgresChangesFilter<`${REALTIME_POSTGRES_CHANGES_LISTEN_EVENT.INSERT}`>,\n    callback: (payload: RealtimePostgresInsertPayload<T>) => void\n  ): RealtimeChannel\n  on<T extends { [key: string]: any }>(\n    type: `${REALTIME_LISTEN_TYPES.POSTGRES_CHANGES}`,\n    filter: RealtimePostgresChangesFilter<`${REALTIME_POSTGRES_CHANGES_LISTEN_EVENT.UPDATE}`>,\n    callback: (payload: RealtimePostgresUpdatePayload<T>) => void\n  ): RealtimeChannel\n  on<T extends { [key: string]: any }>(\n    type: `${REALTIME_LISTEN_TYPES.POSTGRES_CHANGES}`,\n    filter: RealtimePostgresChangesFilter<`${REALTIME_POSTGRES_CHANGES_LISTEN_EVENT.DELETE}`>,\n    callback: (payload: RealtimePostgresDeletePayload<T>) => void\n  ): RealtimeChannel\n  on(\n    type: `${REALTIME_LISTEN_TYPES}`,\n    filter: { event: string; [key: string]: string },\n    callback: (payload: any) => void\n  ): RealtimeChannel {\n    return this._on(type, filter, callback)\n  }\n\n  send(\n    payload: { type: string; [key: string]: any },\n    opts: { [key: string]: any } = {}\n  ): Promise<RealtimeChannelSendResponse> {\n    return new Promise((resolve) => {\n      const push = this._push(\n        payload.type,\n        payload,\n        opts.timeout || this.timeout\n      )\n\n      if (push.rateLimited) {\n        resolve('rate limited')\n      }\n\n      if (\n        payload.type === 'broadcast' &&\n        !this.params?.config?.broadcast?.ack\n      ) {\n        resolve('ok')\n      }\n\n      push.receive('ok', () => resolve('ok'))\n      push.receive('timeout', () => resolve('timed out'))\n    })\n  }\n\n  updateJoinPayload(payload: { [key: string]: any }): void {\n    this.joinPush.updatePayload(payload)\n  }\n\n  /**\n   * Leaves the channel.\n   *\n   * Unsubscribes from server events, and instructs channel to terminate on server.\n   * Triggers onClose() hooks.\n   *\n   * To receive leave acknowledgements, use the a `receive` hook to bind to the server ack, ie:\n   * channel.unsubscribe().receive(\"ok\", () => alert(\"left!\") )\n   */\n  unsubscribe(timeout = this.timeout): Promise<'ok' | 'timed out' | 'error'> {\n    this.state = CHANNEL_STATES.leaving\n    const onClose = () => {\n      this.socket.log('channel', `leave ${this.topic}`)\n      this._trigger(CHANNEL_EVENTS.close, 'leave', this._joinRef())\n    }\n\n    this.rejoinTimer.reset()\n    // Destroy joinPush to avoid connection timeouts during unscription phase\n    this.joinPush.destroy()\n\n    return new Promise((resolve) => {\n      const leavePush = new Push(this, CHANNEL_EVENTS.leave, {}, timeout)\n\n      leavePush\n        .receive('ok', () => {\n          onClose()\n          resolve('ok')\n        })\n        .receive('timeout', () => {\n          onClose()\n          resolve('timed out')\n        })\n        .receive('error', () => {\n          resolve('error')\n        })\n\n      leavePush.send()\n\n      if (!this._canPush()) {\n        leavePush.trigger('ok', {})\n      }\n    })\n  }\n\n  /** @internal */\n  _push(\n    event: string,\n    payload: { [key: string]: any },\n    timeout = this.timeout\n  ) {\n    if (!this.joinedOnce) {\n      throw `tried to push '${event}' to '${this.topic}' before joining. Use channel.subscribe() before pushing events`\n    }\n    let pushEvent = new Push(this, event, payload, timeout)\n    if (this._canPush()) {\n      pushEvent.send()\n    } else {\n      pushEvent.startTimeout()\n      this.pushBuffer.push(pushEvent)\n    }\n\n    return pushEvent\n  }\n\n  /**\n   * Overridable message hook\n   *\n   * Receives all events for specialized message handling before dispatching to the channel callbacks.\n   * Must return the payload, modified or unmodified.\n   *\n   * @internal\n   */\n  _onMessage(_event: string, payload: any, _ref?: string) {\n    return payload\n  }\n\n  /** @internal */\n  _isMember(topic: string): boolean {\n    return this.topic === topic\n  }\n\n  /** @internal */\n  _joinRef(): string {\n    return this.joinPush.ref\n  }\n\n  /** @internal */\n  _trigger(type: string, payload?: any, ref?: string) {\n    const typeLower = type.toLocaleLowerCase()\n    const { close, error, leave, join } = CHANNEL_EVENTS\n    const events: string[] = [close, error, leave, join]\n    if (ref && events.indexOf(typeLower) >= 0 && ref !== this._joinRef()) {\n      return\n    }\n    let handledPayload = this._onMessage(typeLower, payload, ref)\n    if (payload && !handledPayload) {\n      throw 'channel onMessage callbacks must return the payload, modified or unmodified'\n    }\n\n    if (['insert', 'update', 'delete'].includes(typeLower)) {\n      this.bindings.postgres_changes\n        ?.filter((bind) => {\n          return (\n            bind.filter?.event === '*' ||\n            bind.filter?.event?.toLocaleLowerCase() === typeLower\n          )\n        })\n        .map((bind) => bind.callback(handledPayload, ref))\n    } else {\n      this.bindings[typeLower]\n        ?.filter((bind) => {\n          if (\n            ['broadcast', 'presence', 'postgres_changes'].includes(typeLower)\n          ) {\n            if ('id' in bind) {\n              const bindId = bind.id\n              const bindEvent = bind.filter?.event\n              return (\n                bindId &&\n                payload.ids?.includes(bindId) &&\n                (bindEvent === '*' ||\n                  bindEvent?.toLocaleLowerCase() ===\n                    payload.data?.type.toLocaleLowerCase())\n              )\n            } else {\n              const bindEvent = bind?.filter?.event?.toLocaleLowerCase()\n              return (\n                bindEvent === '*' ||\n                bindEvent === payload?.event?.toLocaleLowerCase()\n              )\n            }\n          } else {\n            return bind.type.toLocaleLowerCase() === typeLower\n          }\n        })\n        .map((bind) => {\n          if (typeof handledPayload === 'object' && 'ids' in handledPayload) {\n            const postgresChanges = handledPayload.data\n            const { schema, table, commit_timestamp, type, errors } =\n              postgresChanges\n            const enrichedPayload = {\n              schema: schema,\n              table: table,\n              commit_timestamp: commit_timestamp,\n              eventType: type,\n              new: {},\n              old: {},\n              errors: errors,\n            }\n            handledPayload = {\n              ...enrichedPayload,\n              ...this._getPayloadRecords(postgresChanges),\n            }\n          }\n          bind.callback(handledPayload, ref)\n        })\n    }\n  }\n\n  /** @internal */\n  _isClosed(): boolean {\n    return this.state === CHANNEL_STATES.closed\n  }\n\n  /** @internal */\n  _isJoined(): boolean {\n    return this.state === CHANNEL_STATES.joined\n  }\n\n  /** @internal */\n  _isJoining(): boolean {\n    return this.state === CHANNEL_STATES.joining\n  }\n\n  /** @internal */\n  _isLeaving(): boolean {\n    return this.state === CHANNEL_STATES.leaving\n  }\n\n  /** @internal */\n  _replyEventName(ref: string): string {\n    return `chan_reply_${ref}`\n  }\n\n  /** @internal */\n  _on(type: string, filter: { [key: string]: any }, callback: Function) {\n    const typeLower = type.toLocaleLowerCase()\n\n    const binding = {\n      type: typeLower,\n      filter: filter,\n      callback: callback,\n    }\n\n    if (this.bindings[typeLower]) {\n      this.bindings[typeLower].push(binding)\n    } else {\n      this.bindings[typeLower] = [binding]\n    }\n\n    return this\n  }\n\n  /** @internal */\n  _off(type: string, filter: { [key: string]: any }) {\n    const typeLower = type.toLocaleLowerCase()\n\n    this.bindings[typeLower] = this.bindings[typeLower].filter((bind) => {\n      return !(\n        bind.type?.toLocaleLowerCase() === typeLower &&\n        RealtimeChannel.isEqual(bind.filter, filter)\n      )\n    })\n    return this\n  }\n\n  /** @internal */\n  private static isEqual(\n    obj1: { [key: string]: string },\n    obj2: { [key: string]: string }\n  ) {\n    if (Object.keys(obj1).length !== Object.keys(obj2).length) {\n      return false\n    }\n\n    for (const k in obj1) {\n      if (obj1[k] !== obj2[k]) {\n        return false\n      }\n    }\n\n    return true\n  }\n\n  /** @internal */\n  private _rejoinUntilConnected() {\n    this.rejoinTimer.scheduleTimeout()\n    if (this.socket.isConnected()) {\n      this._rejoin()\n    }\n  }\n\n  /**\n   * Registers a callback that will be executed when the channel closes.\n   *\n   * @internal\n   */\n  private _onClose(callback: Function) {\n    this._on(CHANNEL_EVENTS.close, {}, callback)\n  }\n\n  /**\n   * Registers a callback that will be executed when the channel encounteres an error.\n   *\n   * @internal\n   */\n  private _onError(callback: Function) {\n    this._on(CHANNEL_EVENTS.error, {}, (reason: string) => callback(reason))\n  }\n\n  /**\n   * Returns `true` if the socket is connected and the channel has been joined.\n   *\n   * @internal\n   */\n  private _canPush(): boolean {\n    return this.socket.isConnected() && this._isJoined()\n  }\n\n  /** @internal */\n  private _rejoin(timeout = this.timeout): void {\n    if (this._isLeaving()) {\n      return\n    }\n    this.socket._leaveOpenTopic(this.topic)\n    this.state = CHANNEL_STATES.joining\n    this.joinPush.resend(timeout)\n  }\n\n  /** @internal */\n  private _getPayloadRecords(payload: any) {\n    const records = {\n      new: {},\n      old: {},\n    }\n\n    if (payload.type === 'INSERT' || payload.type === 'UPDATE') {\n      records.new = Transformers.convertChangeData(\n        payload.columns,\n        payload.record\n      )\n    }\n\n    if (payload.type === 'UPDATE' || payload.type === 'DELETE') {\n      records.old = Transformers.convertChangeData(\n        payload.columns,\n        payload.old_record\n      )\n    }\n\n    return records\n  }\n}\n"]},"metadata":{},"sourceType":"module"}