{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router';\nimport { useAuth } from '../components/Auth.js';\nimport { supabase } from '../components/Database.js';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Dashboard = async _ref => {\n  _s();\n\n  let {\n    session\n  } = _ref;\n  const [loading, setLoading] = useState(true);\n  const [username, setUsername] = useState(null);\n  const [website, setWebsite] = useState(null);\n  const [avatar_url, setAvatarUrl] = useState(null);\n  useEffect(() => {\n    getProfile();\n  }, [session]);\n\n  const getProfile = async () => {\n    try {\n      setLoading(true);\n      const {\n        user\n      } = session;\n      let {\n        data,\n        error,\n        status\n      } = await supabase.from('users').select(`email`).eq('id', user.id).single();\n\n      if (error && status !== 406) {\n        throw error;\n      }\n\n      if (data) {\n        setUsername(data.username);\n        setWebsite(data.website);\n        setAvatarUrl(data.avatar_url);\n      }\n    } catch (error) {\n      alert(error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const updateProfile = async e => {\n    e.preventDefault();\n\n    try {\n      setLoading(true);\n      const {\n        user\n      } = session;\n      const updates = {\n        id: user.id,\n        username,\n        website,\n        avatar_url,\n        updated_at: new Date()\n      };\n      let {\n        error\n      } = await supabase.from('users').upsert(updates);\n\n      if (error) {\n        throw error;\n      }\n    } catch (error) {\n      alert(error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: \"HELLO!\"\n  }, void 0, false);\n};\n\n_s(Dashboard, \"ywFn1yZ5qU1jzBRJ6ENZ4swXNpU=\");\n\n_c = Dashboard;\nexport default Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","useAuth","supabase","Dashboard","session","loading","setLoading","username","setUsername","website","setWebsite","avatar_url","setAvatarUrl","getProfile","user","data","error","status","from","select","eq","id","single","alert","message","updateProfile","e","preventDefault","updates","updated_at","Date","upsert"],"sources":["D:/Documenti/GitHub/ZooGames/application/frontend/src/userPages/Dashboard.js"],"sourcesContent":["import React from 'react'\r\nimport { useState, useEffect } from 'react'\r\nimport { useNavigate } from 'react-router'\r\nimport { useAuth } from '../components/Auth.js'\r\nimport { supabase } from '../components/Database.js';\r\n\r\n\r\nconst Dashboard = async ({ session }) => {\r\n  const [loading, setLoading] = useState(true)\r\n  const [username, setUsername] = useState(null)\r\n  const [website, setWebsite] = useState(null)\r\n  const [avatar_url, setAvatarUrl] = useState(null)\r\n\r\n  useEffect(() => {\r\n    getProfile()\r\n  }, [session])\r\n\r\n  const getProfile = async () => {\r\n    try {\r\n      setLoading(true)\r\n      const { user } = session\r\n\r\n      let { data, error, status } = await supabase\r\n        .from('users')\r\n        .select(`email`)\r\n        .eq('id', user.id)\r\n        .single()\r\n\r\n      if (error && status !== 406) {\r\n        throw error\r\n      }\r\n\r\n      if (data) {\r\n        setUsername(data.username)\r\n        setWebsite(data.website)\r\n        setAvatarUrl(data.avatar_url)\r\n      }\r\n    } catch (error) {\r\n      alert(error.message)\r\n    } finally {\r\n      setLoading(false)\r\n    }\r\n  }\r\n\r\n  const updateProfile = async (e) => {\r\n    e.preventDefault()\r\n\r\n    try {\r\n      setLoading(true)\r\n      const { user } = session\r\n\r\n      const updates = {\r\n        id: user.id,\r\n        username,\r\n        website,\r\n        avatar_url,\r\n        updated_at: new Date(),\r\n      }\r\n\r\n      let { error } = await supabase.from('users').upsert(updates)\r\n\r\n      if (error) {\r\n        throw error\r\n      }\r\n    } catch (error) {\r\n      alert(error.message)\r\n    } finally {\r\n      setLoading(false)\r\n    }\r\n  }\r\n\r\n  return (<>HELLO!</>\r\n  \r\n  )\r\n}\r\n\r\nexport default Dashboard;"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,WAAT,QAA4B,cAA5B;AACA,SAASC,OAAT,QAAwB,uBAAxB;AACA,SAASC,QAAT,QAAyB,2BAAzB;;;;AAGA,MAAMC,SAAS,GAAG,cAAuB;EAAA;;EAAA,IAAhB;IAAEC;EAAF,CAAgB;EACvC,MAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAC,IAAD,CAAtC;EACA,MAAM,CAACS,QAAD,EAAWC,WAAX,IAA0BV,QAAQ,CAAC,IAAD,CAAxC;EACA,MAAM,CAACW,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAAC,IAAD,CAAtC;EACA,MAAM,CAACa,UAAD,EAAaC,YAAb,IAA6Bd,QAAQ,CAAC,IAAD,CAA3C;EAEAC,SAAS,CAAC,MAAM;IACdc,UAAU;EACX,CAFQ,EAEN,CAACT,OAAD,CAFM,CAAT;;EAIA,MAAMS,UAAU,GAAG,YAAY;IAC7B,IAAI;MACFP,UAAU,CAAC,IAAD,CAAV;MACA,MAAM;QAAEQ;MAAF,IAAWV,OAAjB;MAEA,IAAI;QAAEW,IAAF;QAAQC,KAAR;QAAeC;MAAf,IAA0B,MAAMf,QAAQ,CACzCgB,IADiC,CAC5B,OAD4B,EAEjCC,MAFiC,CAEzB,OAFyB,EAGjCC,EAHiC,CAG9B,IAH8B,EAGxBN,IAAI,CAACO,EAHmB,EAIjCC,MAJiC,EAApC;;MAMA,IAAIN,KAAK,IAAIC,MAAM,KAAK,GAAxB,EAA6B;QAC3B,MAAMD,KAAN;MACD;;MAED,IAAID,IAAJ,EAAU;QACRP,WAAW,CAACO,IAAI,CAACR,QAAN,CAAX;QACAG,UAAU,CAACK,IAAI,CAACN,OAAN,CAAV;QACAG,YAAY,CAACG,IAAI,CAACJ,UAAN,CAAZ;MACD;IACF,CAnBD,CAmBE,OAAOK,KAAP,EAAc;MACdO,KAAK,CAACP,KAAK,CAACQ,OAAP,CAAL;IACD,CArBD,SAqBU;MACRlB,UAAU,CAAC,KAAD,CAAV;IACD;EACF,CAzBD;;EA2BA,MAAMmB,aAAa,GAAG,MAAOC,CAAP,IAAa;IACjCA,CAAC,CAACC,cAAF;;IAEA,IAAI;MACFrB,UAAU,CAAC,IAAD,CAAV;MACA,MAAM;QAAEQ;MAAF,IAAWV,OAAjB;MAEA,MAAMwB,OAAO,GAAG;QACdP,EAAE,EAAEP,IAAI,CAACO,EADK;QAEdd,QAFc;QAGdE,OAHc;QAIdE,UAJc;QAKdkB,UAAU,EAAE,IAAIC,IAAJ;MALE,CAAhB;MAQA,IAAI;QAAEd;MAAF,IAAY,MAAMd,QAAQ,CAACgB,IAAT,CAAc,OAAd,EAAuBa,MAAvB,CAA8BH,OAA9B,CAAtB;;MAEA,IAAIZ,KAAJ,EAAW;QACT,MAAMA,KAAN;MACD;IACF,CAjBD,CAiBE,OAAOA,KAAP,EAAc;MACdO,KAAK,CAACP,KAAK,CAACQ,OAAP,CAAL;IACD,CAnBD,SAmBU;MACRlB,UAAU,CAAC,KAAD,CAAV;IACD;EACF,CAzBD;;EA2BA,oBAAQ;IAAA;EAAA,iBAAR;AAGD,CAnED;;GAAMH,S;;KAAAA,S;AAqEN,eAAeA,SAAf"},"metadata":{},"sourceType":"module"}