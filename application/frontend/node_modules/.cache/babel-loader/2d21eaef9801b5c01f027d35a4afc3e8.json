{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nexport const resolveFetch = customFetch => {\n  let _fetch;\n\n  if (customFetch) {\n    _fetch = customFetch;\n  } else if (typeof fetch === 'undefined') {\n    _fetch = function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return __awaiter(void 0, void 0, void 0, function* () {\n        return yield (yield import('cross-fetch')).fetch(...args);\n      });\n    };\n  } else {\n    _fetch = fetch;\n  }\n\n  return function () {\n    return _fetch(...arguments);\n  };\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,OAAO,MAAMA,YAAY,GAAIC,WAAD,IAA+B;EACzD,IAAIC,MAAJ;;EACA,IAAID,WAAJ,EAAiB;IACfC,MAAM,GAAGD,WAAT;EACD,CAFD,MAEO,IAAI,OAAOE,KAAP,KAAiB,WAArB,EAAkC;IACvCD,MAAM,GAAG;MAAA,kCAAUE,IAAV;QAAUA,IAAV;MAAA;;MAAA,OAAkBC;QAAC,aAAM,CAAC,MAAM,OAAO,aAAP,CAAP,EAA8BF,KAA9B,CAAoC,GAAGC,IAAvC,CAAN;MAAkD,CAAnD,CAAlB;IAAA,CAAT;EACD,CAFM,MAEA;IACLF,MAAM,GAAGC,KAAT;EACD;;EACD,OAAO;IAAA,OAAaD,MAAM,CAAC,YAAD,CAAnB;EAAA,CAAP;AACD,CAVM","names":["resolveFetch","customFetch","_fetch","fetch","args","__awaiter"],"sources":["D:\\Documenti\\GitHub\\ZooGames\\application\\frontend\\node_modules\\@supabase\\functions-js\\src\\helper.ts"],"sourcesContent":["import { Fetch } from './types'\n\nexport const resolveFetch = (customFetch?: Fetch): Fetch => {\n  let _fetch: Fetch\n  if (customFetch) {\n    _fetch = customFetch\n  } else if (typeof fetch === 'undefined') {\n    _fetch = async (...args) => await (await import('cross-fetch')).fetch(...args)\n  } else {\n    _fetch = fetch\n  }\n  return (...args) => _fetch(...args)\n}\n"]},"metadata":{},"sourceType":"module"}