{"ast":null,"code":"/*\n  This file draws heavily from https://github.com/phoenixframework/phoenix/blob/d344ec0a732ab4ee204215b31de69cf4be72e3bf/assets/js/phoenix/presence.js\n  License: https://github.com/phoenixframework/phoenix/blob/d344ec0a732ab4ee204215b31de69cf4be72e3bf/LICENSE.md\n*/\nexport var REALTIME_PRESENCE_LISTEN_EVENTS;\n\n(function (REALTIME_PRESENCE_LISTEN_EVENTS) {\n  REALTIME_PRESENCE_LISTEN_EVENTS[\"SYNC\"] = \"sync\";\n  REALTIME_PRESENCE_LISTEN_EVENTS[\"JOIN\"] = \"join\";\n  REALTIME_PRESENCE_LISTEN_EVENTS[\"LEAVE\"] = \"leave\";\n})(REALTIME_PRESENCE_LISTEN_EVENTS || (REALTIME_PRESENCE_LISTEN_EVENTS = {}));\n\nexport default class RealtimePresence {\n  /**\n   * Initializes the Presence.\n   *\n   * @param channel - The RealtimeChannel\n   * @param opts - The options,\n   *        for example `{events: {state: 'state', diff: 'diff'}}`\n   */\n  constructor(channel, opts) {\n    this.channel = channel;\n    this.state = {};\n    this.pendingDiffs = [];\n    this.joinRef = null;\n    this.caller = {\n      onJoin: () => {},\n      onLeave: () => {},\n      onSync: () => {}\n    };\n    const events = (opts === null || opts === void 0 ? void 0 : opts.events) || {\n      state: 'presence_state',\n      diff: 'presence_diff'\n    };\n\n    this.channel._on(events.state, {}, newState => {\n      const {\n        onJoin,\n        onLeave,\n        onSync\n      } = this.caller;\n      this.joinRef = this.channel._joinRef();\n      this.state = RealtimePresence.syncState(this.state, newState, onJoin, onLeave);\n      this.pendingDiffs.forEach(diff => {\n        this.state = RealtimePresence.syncDiff(this.state, diff, onJoin, onLeave);\n      });\n      this.pendingDiffs = [];\n      onSync();\n    });\n\n    this.channel._on(events.diff, {}, diff => {\n      const {\n        onJoin,\n        onLeave,\n        onSync\n      } = this.caller;\n\n      if (this.inPendingSyncState()) {\n        this.pendingDiffs.push(diff);\n      } else {\n        this.state = RealtimePresence.syncDiff(this.state, diff, onJoin, onLeave);\n        onSync();\n      }\n    });\n\n    this.onJoin((key, currentPresences, newPresences) => {\n      this.channel._trigger('presence', {\n        event: 'join',\n        key,\n        currentPresences,\n        newPresences\n      });\n    });\n    this.onLeave((key, currentPresences, leftPresences) => {\n      this.channel._trigger('presence', {\n        event: 'leave',\n        key,\n        currentPresences,\n        leftPresences\n      });\n    });\n    this.onSync(() => {\n      this.channel._trigger('presence', {\n        event: 'sync'\n      });\n    });\n  }\n  /**\n   * Used to sync the list of presences on the server with the\n   * client's state.\n   *\n   * An optional `onJoin` and `onLeave` callback can be provided to\n   * react to changes in the client's local presences across\n   * disconnects and reconnects with the server.\n   *\n   * @internal\n   */\n\n\n  static syncState(currentState, newState, onJoin, onLeave) {\n    const state = this.cloneDeep(currentState);\n    const transformedState = this.transformState(newState);\n    const joins = {};\n    const leaves = {};\n    this.map(state, (key, presences) => {\n      if (!transformedState[key]) {\n        leaves[key] = presences;\n      }\n    });\n    this.map(transformedState, (key, newPresences) => {\n      const currentPresences = state[key];\n\n      if (currentPresences) {\n        const newPresenceRefs = newPresences.map(m => m.presence_ref);\n        const curPresenceRefs = currentPresences.map(m => m.presence_ref);\n        const joinedPresences = newPresences.filter(m => curPresenceRefs.indexOf(m.presence_ref) < 0);\n        const leftPresences = currentPresences.filter(m => newPresenceRefs.indexOf(m.presence_ref) < 0);\n\n        if (joinedPresences.length > 0) {\n          joins[key] = joinedPresences;\n        }\n\n        if (leftPresences.length > 0) {\n          leaves[key] = leftPresences;\n        }\n      } else {\n        joins[key] = newPresences;\n      }\n    });\n    return this.syncDiff(state, {\n      joins,\n      leaves\n    }, onJoin, onLeave);\n  }\n  /**\n   * Used to sync a diff of presence join and leave events from the\n   * server, as they happen.\n   *\n   * Like `syncState`, `syncDiff` accepts optional `onJoin` and\n   * `onLeave` callbacks to react to a user joining or leaving from a\n   * device.\n   *\n   * @internal\n   */\n\n\n  static syncDiff(state, diff, onJoin, onLeave) {\n    const {\n      joins,\n      leaves\n    } = {\n      joins: this.transformState(diff.joins),\n      leaves: this.transformState(diff.leaves)\n    };\n\n    if (!onJoin) {\n      onJoin = () => {};\n    }\n\n    if (!onLeave) {\n      onLeave = () => {};\n    }\n\n    this.map(joins, (key, newPresences) => {\n      var _a;\n\n      const currentPresences = (_a = state[key]) !== null && _a !== void 0 ? _a : [];\n      state[key] = this.cloneDeep(newPresences);\n\n      if (currentPresences.length > 0) {\n        const joinedPresenceRefs = state[key].map(m => m.presence_ref);\n        const curPresences = currentPresences.filter(m => joinedPresenceRefs.indexOf(m.presence_ref) < 0);\n        state[key].unshift(...curPresences);\n      }\n\n      onJoin(key, currentPresences, newPresences);\n    });\n    this.map(leaves, (key, leftPresences) => {\n      let currentPresences = state[key];\n      if (!currentPresences) return;\n      const presenceRefsToRemove = leftPresences.map(m => m.presence_ref);\n      currentPresences = currentPresences.filter(m => presenceRefsToRemove.indexOf(m.presence_ref) < 0);\n      state[key] = currentPresences;\n      onLeave(key, currentPresences, leftPresences);\n      if (currentPresences.length === 0) delete state[key];\n    });\n    return state;\n  }\n  /** @internal */\n\n\n  static map(obj, func) {\n    return Object.getOwnPropertyNames(obj).map(key => func(key, obj[key]));\n  }\n  /**\n   * Remove 'metas' key\n   * Change 'phx_ref' to 'presence_ref'\n   * Remove 'phx_ref' and 'phx_ref_prev'\n   *\n   * @example\n   * // returns {\n   *  abc123: [\n   *    { presence_ref: '2', user_id: 1 },\n   *    { presence_ref: '3', user_id: 2 }\n   *  ]\n   * }\n   * RealtimePresence.transformState({\n   *  abc123: {\n   *    metas: [\n   *      { phx_ref: '2', phx_ref_prev: '1' user_id: 1 },\n   *      { phx_ref: '3', user_id: 2 }\n   *    ]\n   *  }\n   * })\n   *\n   * @internal\n   */\n\n\n  static transformState(state) {\n    state = this.cloneDeep(state);\n    return Object.getOwnPropertyNames(state).reduce((newState, key) => {\n      const presences = state[key];\n\n      if ('metas' in presences) {\n        newState[key] = presences.metas.map(presence => {\n          presence['presence_ref'] = presence['phx_ref'];\n          delete presence['phx_ref'];\n          delete presence['phx_ref_prev'];\n          return presence;\n        });\n      } else {\n        newState[key] = presences;\n      }\n\n      return newState;\n    }, {});\n  }\n  /** @internal */\n\n\n  static cloneDeep(obj) {\n    return JSON.parse(JSON.stringify(obj));\n  }\n  /** @internal */\n\n\n  onJoin(callback) {\n    this.caller.onJoin = callback;\n  }\n  /** @internal */\n\n\n  onLeave(callback) {\n    this.caller.onLeave = callback;\n  }\n  /** @internal */\n\n\n  onSync(callback) {\n    this.caller.onSync = callback;\n  }\n  /** @internal */\n\n\n  inPendingSyncState() {\n    return !this.joinRef || this.joinRef !== this.channel._joinRef();\n  }\n\n}","map":{"version":3,"mappings":"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","names":["REALTIME_PRESENCE_LISTEN_EVENTS","RealtimePresence","constructor","channel","opts","onJoin","onLeave","onSync","events","state","diff","_on","newState","caller","joinRef","_joinRef","syncState","pendingDiffs","forEach","syncDiff","inPendingSyncState","push","key","currentPresences","newPresences","_trigger","event","leftPresences","currentState","cloneDeep","transformedState","transformState","joins","leaves","map","presences","newPresenceRefs","m","presence_ref","curPresenceRefs","joinedPresences","filter","indexOf","length","_a","joinedPresenceRefs","curPresences","unshift","presenceRefsToRemove","obj","func","Object","getOwnPropertyNames","reduce","metas","presence","JSON","parse","stringify","callback"],"sources":["D:\\Documenti\\GitHub\\ZooGames\\application\\frontend\\node_modules\\@supabase\\realtime-js\\src\\RealtimePresence.ts"],"sourcesContent":["/*\n  This file draws heavily from https://github.com/phoenixframework/phoenix/blob/d344ec0a732ab4ee204215b31de69cf4be72e3bf/assets/js/phoenix/presence.js\n  License: https://github.com/phoenixframework/phoenix/blob/d344ec0a732ab4ee204215b31de69cf4be72e3bf/LICENSE.md\n*/\n\nimport {\n  PresenceOpts,\n  PresenceOnJoinCallback,\n  PresenceOnLeaveCallback,\n} from 'phoenix'\nimport RealtimeChannel from './RealtimeChannel'\n\ntype Presence = {\n  presence_ref: string\n  [key: string]: any\n}\n\nexport type RealtimePresenceState = { [key: string]: Presence[] }\n\nexport type RealtimePresenceJoinPayload = {\n  event: `${REALTIME_PRESENCE_LISTEN_EVENTS.JOIN}`\n  key: string\n  currentPresences: Presence[]\n  newPresences: Presence[]\n}\n\nexport type RealtimePresenceLeavePayload = {\n  event: `${REALTIME_PRESENCE_LISTEN_EVENTS.LEAVE}`\n  key: string\n  currentPresences: Presence[]\n  leftPresences: Presence[]\n}\n\nexport enum REALTIME_PRESENCE_LISTEN_EVENTS {\n  SYNC = 'sync',\n  JOIN = 'join',\n  LEAVE = 'leave',\n}\n\ntype PresenceDiff = {\n  joins: RealtimePresenceState\n  leaves: RealtimePresenceState\n}\n\ntype RawPresenceState = {\n  [key: string]: {\n    metas: {\n      phx_ref?: string\n      phx_ref_prev?: string\n      [key: string]: any\n    }[]\n  }\n}\n\ntype RawPresenceDiff = {\n  joins: RawPresenceState\n  leaves: RawPresenceState\n}\n\ntype PresenceChooser<T> = (key: string, presences: Presence[]) => T\n\nexport default class RealtimePresence {\n  state: RealtimePresenceState = {}\n  pendingDiffs: RawPresenceDiff[] = []\n  joinRef: string | null = null\n  caller: {\n    onJoin: PresenceOnJoinCallback\n    onLeave: PresenceOnLeaveCallback\n    onSync: () => void\n  } = {\n    onJoin: () => {},\n    onLeave: () => {},\n    onSync: () => {},\n  }\n\n  /**\n   * Initializes the Presence.\n   *\n   * @param channel - The RealtimeChannel\n   * @param opts - The options,\n   *        for example `{events: {state: 'state', diff: 'diff'}}`\n   */\n  constructor(public channel: RealtimeChannel, opts?: PresenceOpts) {\n    const events = opts?.events || {\n      state: 'presence_state',\n      diff: 'presence_diff',\n    }\n\n    this.channel._on(events.state, {}, (newState: RawPresenceState) => {\n      const { onJoin, onLeave, onSync } = this.caller\n\n      this.joinRef = this.channel._joinRef()\n\n      this.state = RealtimePresence.syncState(\n        this.state,\n        newState,\n        onJoin,\n        onLeave\n      )\n\n      this.pendingDiffs.forEach((diff) => {\n        this.state = RealtimePresence.syncDiff(\n          this.state,\n          diff,\n          onJoin,\n          onLeave\n        )\n      })\n\n      this.pendingDiffs = []\n\n      onSync()\n    })\n\n    this.channel._on(events.diff, {}, (diff: RawPresenceDiff) => {\n      const { onJoin, onLeave, onSync } = this.caller\n\n      if (this.inPendingSyncState()) {\n        this.pendingDiffs.push(diff)\n      } else {\n        this.state = RealtimePresence.syncDiff(\n          this.state,\n          diff,\n          onJoin,\n          onLeave\n        )\n\n        onSync()\n      }\n    })\n\n    this.onJoin((key, currentPresences, newPresences) => {\n      this.channel._trigger('presence', {\n        event: 'join',\n        key,\n        currentPresences,\n        newPresences,\n      })\n    })\n\n    this.onLeave((key, currentPresences, leftPresences) => {\n      this.channel._trigger('presence', {\n        event: 'leave',\n        key,\n        currentPresences,\n        leftPresences,\n      })\n    })\n\n    this.onSync(() => {\n      this.channel._trigger('presence', { event: 'sync' })\n    })\n  }\n\n  /**\n   * Used to sync the list of presences on the server with the\n   * client's state.\n   *\n   * An optional `onJoin` and `onLeave` callback can be provided to\n   * react to changes in the client's local presences across\n   * disconnects and reconnects with the server.\n   *\n   * @internal\n   */\n  private static syncState(\n    currentState: RealtimePresenceState,\n    newState: RawPresenceState | RealtimePresenceState,\n    onJoin: PresenceOnJoinCallback,\n    onLeave: PresenceOnLeaveCallback\n  ): RealtimePresenceState {\n    const state = this.cloneDeep(currentState)\n    const transformedState = this.transformState(newState)\n    const joins: RealtimePresenceState = {}\n    const leaves: RealtimePresenceState = {}\n\n    this.map(state, (key: string, presences: Presence[]) => {\n      if (!transformedState[key]) {\n        leaves[key] = presences\n      }\n    })\n\n    this.map(transformedState, (key, newPresences: Presence[]) => {\n      const currentPresences: Presence[] = state[key]\n\n      if (currentPresences) {\n        const newPresenceRefs = newPresences.map(\n          (m: Presence) => m.presence_ref\n        )\n        const curPresenceRefs = currentPresences.map(\n          (m: Presence) => m.presence_ref\n        )\n        const joinedPresences: Presence[] = newPresences.filter(\n          (m: Presence) => curPresenceRefs.indexOf(m.presence_ref) < 0\n        )\n        const leftPresences: Presence[] = currentPresences.filter(\n          (m: Presence) => newPresenceRefs.indexOf(m.presence_ref) < 0\n        )\n\n        if (joinedPresences.length > 0) {\n          joins[key] = joinedPresences\n        }\n\n        if (leftPresences.length > 0) {\n          leaves[key] = leftPresences\n        }\n      } else {\n        joins[key] = newPresences\n      }\n    })\n\n    return this.syncDiff(state, { joins, leaves }, onJoin, onLeave)\n  }\n\n  /**\n   * Used to sync a diff of presence join and leave events from the\n   * server, as they happen.\n   *\n   * Like `syncState`, `syncDiff` accepts optional `onJoin` and\n   * `onLeave` callbacks to react to a user joining or leaving from a\n   * device.\n   *\n   * @internal\n   */\n  private static syncDiff(\n    state: RealtimePresenceState,\n    diff: RawPresenceDiff | PresenceDiff,\n    onJoin: PresenceOnJoinCallback,\n    onLeave: PresenceOnLeaveCallback\n  ): RealtimePresenceState {\n    const { joins, leaves } = {\n      joins: this.transformState(diff.joins),\n      leaves: this.transformState(diff.leaves),\n    }\n\n    if (!onJoin) {\n      onJoin = () => {}\n    }\n\n    if (!onLeave) {\n      onLeave = () => {}\n    }\n\n    this.map(joins, (key, newPresences: Presence[]) => {\n      const currentPresences: Presence[] = state[key] ?? []\n      state[key] = this.cloneDeep(newPresences)\n\n      if (currentPresences.length > 0) {\n        const joinedPresenceRefs = state[key].map(\n          (m: Presence) => m.presence_ref\n        )\n        const curPresences: Presence[] = currentPresences.filter(\n          (m: Presence) => joinedPresenceRefs.indexOf(m.presence_ref) < 0\n        )\n\n        state[key].unshift(...curPresences)\n      }\n\n      onJoin(key, currentPresences, newPresences)\n    })\n\n    this.map(leaves, (key, leftPresences: Presence[]) => {\n      let currentPresences: Presence[] = state[key]\n\n      if (!currentPresences) return\n\n      const presenceRefsToRemove = leftPresences.map(\n        (m: Presence) => m.presence_ref\n      )\n      currentPresences = currentPresences.filter(\n        (m: Presence) => presenceRefsToRemove.indexOf(m.presence_ref) < 0\n      )\n\n      state[key] = currentPresences\n\n      onLeave(key, currentPresences, leftPresences)\n\n      if (currentPresences.length === 0) delete state[key]\n    })\n\n    return state\n  }\n\n  /** @internal */\n  private static map<T = any>(\n    obj: RealtimePresenceState,\n    func: PresenceChooser<T>\n  ): T[] {\n    return Object.getOwnPropertyNames(obj).map((key) => func(key, obj[key]))\n  }\n\n  /**\n   * Remove 'metas' key\n   * Change 'phx_ref' to 'presence_ref'\n   * Remove 'phx_ref' and 'phx_ref_prev'\n   *\n   * @example\n   * // returns {\n   *  abc123: [\n   *    { presence_ref: '2', user_id: 1 },\n   *    { presence_ref: '3', user_id: 2 }\n   *  ]\n   * }\n   * RealtimePresence.transformState({\n   *  abc123: {\n   *    metas: [\n   *      { phx_ref: '2', phx_ref_prev: '1' user_id: 1 },\n   *      { phx_ref: '3', user_id: 2 }\n   *    ]\n   *  }\n   * })\n   *\n   * @internal\n   */\n  private static transformState(\n    state: RawPresenceState | RealtimePresenceState\n  ): RealtimePresenceState {\n    state = this.cloneDeep(state)\n\n    return Object.getOwnPropertyNames(state).reduce((newState, key) => {\n      const presences = state[key]\n\n      if ('metas' in presences) {\n        newState[key] = presences.metas.map((presence) => {\n          presence['presence_ref'] = presence['phx_ref']\n\n          delete presence['phx_ref']\n          delete presence['phx_ref_prev']\n\n          return presence\n        }) as Presence[]\n      } else {\n        newState[key] = presences\n      }\n\n      return newState\n    }, {} as RealtimePresenceState)\n  }\n\n  /** @internal */\n  private static cloneDeep(obj: { [key: string]: any }) {\n    return JSON.parse(JSON.stringify(obj))\n  }\n\n  /** @internal */\n  private onJoin(callback: PresenceOnJoinCallback): void {\n    this.caller.onJoin = callback\n  }\n\n  /** @internal */\n  private onLeave(callback: PresenceOnLeaveCallback): void {\n    this.caller.onLeave = callback\n  }\n\n  /** @internal */\n  private onSync(callback: () => void): void {\n    this.caller.onSync = callback\n  }\n\n  /** @internal */\n  private inPendingSyncState(): boolean {\n    return !this.joinRef || this.joinRef !== this.channel._joinRef()\n  }\n}\n"]},"metadata":{},"sourceType":"module"}