{"ast":null,"code":"import PostgrestTransformBuilder from './PostgrestTransformBuilder';\nexport default class PostgrestFilterBuilder extends PostgrestTransformBuilder {\n  /**\n   * Match only rows where `column` is equal to `value`.\n   *\n   * To check if the value of `column` is NULL, you should use `.is()` instead.\n   *\n   * @param column - The column to filter on\n   * @param value - The value to filter with\n   */\n  eq(column, value) {\n    this.url.searchParams.append(column, `eq.${value}`);\n    return this;\n  }\n  /**\n   * Match only rows where `column` is not equal to `value`.\n   *\n   * @param column - The column to filter on\n   * @param value - The value to filter with\n   */\n\n\n  neq(column, value) {\n    this.url.searchParams.append(column, `neq.${value}`);\n    return this;\n  }\n  /**\n   * Match only rows where `column` is greater than `value`.\n   *\n   * @param column - The column to filter on\n   * @param value - The value to filter with\n   */\n\n\n  gt(column, value) {\n    this.url.searchParams.append(column, `gt.${value}`);\n    return this;\n  }\n  /**\n   * Match only rows where `column` is greater than or equal to `value`.\n   *\n   * @param column - The column to filter on\n   * @param value - The value to filter with\n   */\n\n\n  gte(column, value) {\n    this.url.searchParams.append(column, `gte.${value}`);\n    return this;\n  }\n  /**\n   * Match only rows where `column` is less than `value`.\n   *\n   * @param column - The column to filter on\n   * @param value - The value to filter with\n   */\n\n\n  lt(column, value) {\n    this.url.searchParams.append(column, `lt.${value}`);\n    return this;\n  }\n  /**\n   * Match only rows where `column` is less than or equal to `value`.\n   *\n   * @param column - The column to filter on\n   * @param value - The value to filter with\n   */\n\n\n  lte(column, value) {\n    this.url.searchParams.append(column, `lte.${value}`);\n    return this;\n  }\n  /**\n   * Match only rows where `column` matches `pattern` case-sensitively.\n   *\n   * @param column - The column to filter on\n   * @param pattern - The pattern to match with\n   */\n\n\n  like(column, pattern) {\n    this.url.searchParams.append(column, `like.${pattern}`);\n    return this;\n  }\n  /**\n   * Match only rows where `column` matches `pattern` case-insensitively.\n   *\n   * @param column - The column to filter on\n   * @param pattern - The pattern to match with\n   */\n\n\n  ilike(column, pattern) {\n    this.url.searchParams.append(column, `ilike.${pattern}`);\n    return this;\n  }\n  /**\n   * Match only rows where `column` IS `value`.\n   *\n   * For non-boolean columns, this is only relevant for checking if the value of\n   * `column` is NULL by setting `value` to `null`.\n   *\n   * For boolean columns, you can also set `value` to `true` or `false` and it\n   * will behave the same way as `.eq()`.\n   *\n   * @param column - The column to filter on\n   * @param value - The value to filter with\n   */\n\n\n  is(column, value) {\n    this.url.searchParams.append(column, `is.${value}`);\n    return this;\n  }\n  /**\n   * Match only rows where `column` is included in the `values` array.\n   *\n   * @param column - The column to filter on\n   * @param values - The values array to filter with\n   */\n\n\n  in(column, values) {\n    const cleanedValues = values.map(s => {\n      // handle postgrest reserved characters\n      // https://postgrest.org/en/v7.0.0/api.html#reserved-characters\n      if (typeof s === 'string' && new RegExp('[,()]').test(s)) return `\"${s}\"`;else return `${s}`;\n    }).join(',');\n    this.url.searchParams.append(column, `in.(${cleanedValues})`);\n    return this;\n  }\n  /**\n   * Only relevant for jsonb, array, and range columns. Match only rows where\n   * `column` contains every element appearing in `value`.\n   *\n   * @param column - The jsonb, array, or range column to filter on\n   * @param value - The jsonb, array, or range value to filter with\n   */\n\n\n  contains(column, value) {\n    if (typeof value === 'string') {\n      // range types can be inclusive '[', ']' or exclusive '(', ')' so just\n      // keep it simple and accept a string\n      this.url.searchParams.append(column, `cs.${value}`);\n    } else if (Array.isArray(value)) {\n      // array\n      this.url.searchParams.append(column, `cs.{${value.join(',')}}`);\n    } else {\n      // json\n      this.url.searchParams.append(column, `cs.${JSON.stringify(value)}`);\n    }\n\n    return this;\n  }\n  /**\n   * Only relevant for jsonb, array, and range columns. Match only rows where\n   * every element appearing in `column` is contained by `value`.\n   *\n   * @param column - The jsonb, array, or range column to filter on\n   * @param value - The jsonb, array, or range value to filter with\n   */\n\n\n  containedBy(column, value) {\n    if (typeof value === 'string') {\n      // range\n      this.url.searchParams.append(column, `cd.${value}`);\n    } else if (Array.isArray(value)) {\n      // array\n      this.url.searchParams.append(column, `cd.{${value.join(',')}}`);\n    } else {\n      // json\n      this.url.searchParams.append(column, `cd.${JSON.stringify(value)}`);\n    }\n\n    return this;\n  }\n  /**\n   * Only relevant for range columns. Match only rows where every element in\n   * `column` is greater than any element in `range`.\n   *\n   * @param column - The range column to filter on\n   * @param range - The range to filter with\n   */\n\n\n  rangeGt(column, range) {\n    this.url.searchParams.append(column, `sr.${range}`);\n    return this;\n  }\n  /**\n   * Only relevant for range columns. Match only rows where every element in\n   * `column` is either contained in `range` or greater than any element in\n   * `range`.\n   *\n   * @param column - The range column to filter on\n   * @param range - The range to filter with\n   */\n\n\n  rangeGte(column, range) {\n    this.url.searchParams.append(column, `nxl.${range}`);\n    return this;\n  }\n  /**\n   * Only relevant for range columns. Match only rows where every element in\n   * `column` is less than any element in `range`.\n   *\n   * @param column - The range column to filter on\n   * @param range - The range to filter with\n   */\n\n\n  rangeLt(column, range) {\n    this.url.searchParams.append(column, `sl.${range}`);\n    return this;\n  }\n  /**\n   * Only relevant for range columns. Match only rows where every element in\n   * `column` is either contained in `range` or less than any element in\n   * `range`.\n   *\n   * @param column - The range column to filter on\n   * @param range - The range to filter with\n   */\n\n\n  rangeLte(column, range) {\n    this.url.searchParams.append(column, `nxr.${range}`);\n    return this;\n  }\n  /**\n   * Only relevant for range columns. Match only rows where `column` is\n   * mutually exclusive to `range` and there can be no element between the two\n   * ranges.\n   *\n   * @param column - The range column to filter on\n   * @param range - The range to filter with\n   */\n\n\n  rangeAdjacent(column, range) {\n    this.url.searchParams.append(column, `adj.${range}`);\n    return this;\n  }\n  /**\n   * Only relevant for array and range columns. Match only rows where\n   * `column` and `value` have an element in common.\n   *\n   * @param column - The array or range column to filter on\n   * @param value - The array or range value to filter with\n   */\n\n\n  overlaps(column, value) {\n    if (typeof value === 'string') {\n      // range\n      this.url.searchParams.append(column, `ov.${value}`);\n    } else {\n      // array\n      this.url.searchParams.append(column, `ov.{${value.join(',')}}`);\n    }\n\n    return this;\n  }\n  /**\n   * Only relevant for text and tsvector columns. Match only rows where\n   * `column` matches the query string in `query`.\n   *\n   * @param column - The text or tsvector column to filter on\n   * @param query - The query text to match with\n   * @param options - Named parameters\n   * @param options.config - The text search configuration to use\n   * @param options.type - Change how the `query` text is interpreted\n   */\n\n\n  textSearch(column, query) {\n    let {\n      config,\n      type\n    } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let typePart = '';\n\n    if (type === 'plain') {\n      typePart = 'pl';\n    } else if (type === 'phrase') {\n      typePart = 'ph';\n    } else if (type === 'websearch') {\n      typePart = 'w';\n    }\n\n    const configPart = config === undefined ? '' : `(${config})`;\n    this.url.searchParams.append(column, `${typePart}fts${configPart}.${query}`);\n    return this;\n  }\n  /**\n   * Match only rows where each column in `query` keys is equal to its\n   * associated value. Shorthand for multiple `.eq()`s.\n   *\n   * @param query - The object to filter with, with column names as keys mapped\n   * to their filter values\n   */\n\n\n  match(query) {\n    Object.entries(query).forEach(_ref => {\n      let [column, value] = _ref;\n      this.url.searchParams.append(column, `eq.${value}`);\n    });\n    return this;\n  }\n  /**\n   * Match only rows which doesn't satisfy the filter.\n   *\n   * Unlike most filters, `opearator` and `value` are used as-is and need to\n   * follow [PostgREST\n   * syntax](https://postgrest.org/en/stable/api.html#operators). You also need\n   * to make sure they are properly sanitized.\n   *\n   * @param column - The column to filter on\n   * @param operator - The operator to be negated to filter with, following\n   * PostgREST syntax\n   * @param value - The value to filter with, following PostgREST syntax\n   */\n\n\n  not(column, operator, value) {\n    this.url.searchParams.append(column, `not.${operator}.${value}`);\n    return this;\n  }\n  /**\n   * Match only rows which satisfy at least one of the filters.\n   *\n   * Unlike most filters, `filters` is used as-is and needs to follow [PostgREST\n   * syntax](https://postgrest.org/en/stable/api.html#operators). You also need\n   * to make sure it's properly sanitized.\n   *\n   * It's currently not possible to do an `.or()` filter across multiple tables.\n   *\n   * @param filters - The filters to use, following PostgREST syntax\n   * @param foreignTable - Set this to filter on foreign tables instead of the\n   * current table\n   */\n\n\n  or(filters) {\n    let {\n      foreignTable\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const key = foreignTable ? `${foreignTable}.or` : 'or';\n    this.url.searchParams.append(key, `(${filters})`);\n    return this;\n  }\n  /**\n   * Match only rows which satisfy the filter. This is an escape hatch - you\n   * should use the specific filter methods wherever possible.\n   *\n   * Unlike most filters, `opearator` and `value` are used as-is and need to\n   * follow [PostgREST\n   * syntax](https://postgrest.org/en/stable/api.html#operators). You also need\n   * to make sure they are properly sanitized.\n   *\n   * @param column - The column to filter on\n   * @param operator - The operator to filter with, following PostgREST syntax\n   * @param value - The value to filter with, following PostgREST syntax\n   */\n\n\n  filter(column, operator, value) {\n    this.url.searchParams.append(column, `${operator}.${value}`);\n    return this;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["PostgrestTransformBuilder","PostgrestFilterBuilder","eq","column","value","url","searchParams","append","neq","gt","gte","lt","lte","like","pattern","ilike","is","in","values","cleanedValues","map","s","RegExp","test","join","contains","Array","isArray","JSON","stringify","containedBy","rangeGt","range","rangeGte","rangeLt","rangeLte","rangeAdjacent","overlaps","textSearch","query","config","type","typePart","configPart","undefined","match","Object","entries","forEach","not","operator","or","filters","foreignTable","key","filter"],"sources":["D:\\Documenti\\GitHub\\ZooGames\\application\\frontend\\node_modules\\@supabase\\postgrest-js\\src\\PostgrestFilterBuilder.ts"],"sourcesContent":["import PostgrestTransformBuilder from './PostgrestTransformBuilder'\nimport { GenericSchema } from './types'\n\ntype FilterOperator =\n  | 'eq'\n  | 'neq'\n  | 'gt'\n  | 'gte'\n  | 'lt'\n  | 'lte'\n  | 'like'\n  | 'ilike'\n  | 'is'\n  | 'in'\n  | 'cs'\n  | 'cd'\n  | 'sl'\n  | 'sr'\n  | 'nxl'\n  | 'nxr'\n  | 'adj'\n  | 'ov'\n  | 'fts'\n  | 'plfts'\n  | 'phfts'\n  | 'wfts'\n\nexport default class PostgrestFilterBuilder<\n  Schema extends GenericSchema,\n  Row extends Record<string, unknown>,\n  Result\n> extends PostgrestTransformBuilder<Schema, Row, Result> {\n  eq<ColumnName extends string & keyof Row>(column: ColumnName, value: Row[ColumnName]): this\n  eq(column: string, value: unknown): this\n  /**\n   * Match only rows where `column` is equal to `value`.\n   *\n   * To check if the value of `column` is NULL, you should use `.is()` instead.\n   *\n   * @param column - The column to filter on\n   * @param value - The value to filter with\n   */\n  eq(column: string, value: unknown): this {\n    this.url.searchParams.append(column, `eq.${value}`)\n    return this\n  }\n\n  neq<ColumnName extends string & keyof Row>(column: ColumnName, value: Row[ColumnName]): this\n  neq(column: string, value: unknown): this\n  /**\n   * Match only rows where `column` is not equal to `value`.\n   *\n   * @param column - The column to filter on\n   * @param value - The value to filter with\n   */\n  neq(column: string, value: unknown): this {\n    this.url.searchParams.append(column, `neq.${value}`)\n    return this\n  }\n\n  gt<ColumnName extends string & keyof Row>(column: ColumnName, value: Row[ColumnName]): this\n  gt(column: string, value: unknown): this\n  /**\n   * Match only rows where `column` is greater than `value`.\n   *\n   * @param column - The column to filter on\n   * @param value - The value to filter with\n   */\n  gt(column: string, value: unknown): this {\n    this.url.searchParams.append(column, `gt.${value}`)\n    return this\n  }\n\n  gte<ColumnName extends string & keyof Row>(column: ColumnName, value: Row[ColumnName]): this\n  gte(column: string, value: unknown): this\n  /**\n   * Match only rows where `column` is greater than or equal to `value`.\n   *\n   * @param column - The column to filter on\n   * @param value - The value to filter with\n   */\n  gte(column: string, value: unknown): this {\n    this.url.searchParams.append(column, `gte.${value}`)\n    return this\n  }\n\n  lt<ColumnName extends string & keyof Row>(column: ColumnName, value: Row[ColumnName]): this\n  lt(column: string, value: unknown): this\n  /**\n   * Match only rows where `column` is less than `value`.\n   *\n   * @param column - The column to filter on\n   * @param value - The value to filter with\n   */\n  lt(column: string, value: unknown): this {\n    this.url.searchParams.append(column, `lt.${value}`)\n    return this\n  }\n\n  lte<ColumnName extends string & keyof Row>(column: ColumnName, value: Row[ColumnName]): this\n  lte(column: string, value: unknown): this\n  /**\n   * Match only rows where `column` is less than or equal to `value`.\n   *\n   * @param column - The column to filter on\n   * @param value - The value to filter with\n   */\n  lte(column: string, value: unknown): this {\n    this.url.searchParams.append(column, `lte.${value}`)\n    return this\n  }\n\n  like<ColumnName extends string & keyof Row>(column: ColumnName, pattern: string): this\n  like(column: string, pattern: string): this\n  /**\n   * Match only rows where `column` matches `pattern` case-sensitively.\n   *\n   * @param column - The column to filter on\n   * @param pattern - The pattern to match with\n   */\n  like(column: string, pattern: string): this {\n    this.url.searchParams.append(column, `like.${pattern}`)\n    return this\n  }\n\n  ilike<ColumnName extends string & keyof Row>(column: ColumnName, pattern: string): this\n  ilike(column: string, pattern: string): this\n  /**\n   * Match only rows where `column` matches `pattern` case-insensitively.\n   *\n   * @param column - The column to filter on\n   * @param pattern - The pattern to match with\n   */\n  ilike(column: string, pattern: string): this {\n    this.url.searchParams.append(column, `ilike.${pattern}`)\n    return this\n  }\n\n  is<ColumnName extends string & keyof Row>(\n    column: ColumnName,\n    value: Row[ColumnName] & (boolean | null)\n  ): this\n  is(column: string, value: boolean | null): this\n  /**\n   * Match only rows where `column` IS `value`.\n   *\n   * For non-boolean columns, this is only relevant for checking if the value of\n   * `column` is NULL by setting `value` to `null`.\n   *\n   * For boolean columns, you can also set `value` to `true` or `false` and it\n   * will behave the same way as `.eq()`.\n   *\n   * @param column - The column to filter on\n   * @param value - The value to filter with\n   */\n  is(column: string, value: boolean | null): this {\n    this.url.searchParams.append(column, `is.${value}`)\n    return this\n  }\n\n  in<ColumnName extends string & keyof Row>(column: ColumnName, values: Row[ColumnName][]): this\n  in(column: string, values: unknown[]): this\n  /**\n   * Match only rows where `column` is included in the `values` array.\n   *\n   * @param column - The column to filter on\n   * @param values - The values array to filter with\n   */\n  in(column: string, values: unknown[]): this {\n    const cleanedValues = values\n      .map((s) => {\n        // handle postgrest reserved characters\n        // https://postgrest.org/en/v7.0.0/api.html#reserved-characters\n        if (typeof s === 'string' && new RegExp('[,()]').test(s)) return `\"${s}\"`\n        else return `${s}`\n      })\n      .join(',')\n    this.url.searchParams.append(column, `in.(${cleanedValues})`)\n    return this\n  }\n\n  contains<ColumnName extends string & keyof Row>(\n    column: ColumnName,\n    value: string | Row[ColumnName][] | Record<string, unknown>\n  ): this\n  contains(column: string, value: string | unknown[] | Record<string, unknown>): this\n  /**\n   * Only relevant for jsonb, array, and range columns. Match only rows where\n   * `column` contains every element appearing in `value`.\n   *\n   * @param column - The jsonb, array, or range column to filter on\n   * @param value - The jsonb, array, or range value to filter with\n   */\n  contains(column: string, value: string | unknown[] | Record<string, unknown>): this {\n    if (typeof value === 'string') {\n      // range types can be inclusive '[', ']' or exclusive '(', ')' so just\n      // keep it simple and accept a string\n      this.url.searchParams.append(column, `cs.${value}`)\n    } else if (Array.isArray(value)) {\n      // array\n      this.url.searchParams.append(column, `cs.{${value.join(',')}}`)\n    } else {\n      // json\n      this.url.searchParams.append(column, `cs.${JSON.stringify(value)}`)\n    }\n    return this\n  }\n\n  containedBy<ColumnName extends string & keyof Row>(\n    column: ColumnName,\n    value: string | Row[ColumnName][] | Record<string, unknown>\n  ): this\n  containedBy(column: string, value: string | unknown[] | Record<string, unknown>): this\n  /**\n   * Only relevant for jsonb, array, and range columns. Match only rows where\n   * every element appearing in `column` is contained by `value`.\n   *\n   * @param column - The jsonb, array, or range column to filter on\n   * @param value - The jsonb, array, or range value to filter with\n   */\n  containedBy(column: string, value: string | unknown[] | Record<string, unknown>): this {\n    if (typeof value === 'string') {\n      // range\n      this.url.searchParams.append(column, `cd.${value}`)\n    } else if (Array.isArray(value)) {\n      // array\n      this.url.searchParams.append(column, `cd.{${value.join(',')}}`)\n    } else {\n      // json\n      this.url.searchParams.append(column, `cd.${JSON.stringify(value)}`)\n    }\n    return this\n  }\n\n  rangeGt<ColumnName extends string & keyof Row>(column: ColumnName, range: string): this\n  rangeGt(column: string, range: string): this\n  /**\n   * Only relevant for range columns. Match only rows where every element in\n   * `column` is greater than any element in `range`.\n   *\n   * @param column - The range column to filter on\n   * @param range - The range to filter with\n   */\n  rangeGt(column: string, range: string): this {\n    this.url.searchParams.append(column, `sr.${range}`)\n    return this\n  }\n\n  rangeGte<ColumnName extends string & keyof Row>(column: ColumnName, range: string): this\n  rangeGte(column: string, range: string): this\n  /**\n   * Only relevant for range columns. Match only rows where every element in\n   * `column` is either contained in `range` or greater than any element in\n   * `range`.\n   *\n   * @param column - The range column to filter on\n   * @param range - The range to filter with\n   */\n  rangeGte(column: string, range: string): this {\n    this.url.searchParams.append(column, `nxl.${range}`)\n    return this\n  }\n\n  rangeLt<ColumnName extends string & keyof Row>(column: ColumnName, range: string): this\n  rangeLt(column: string, range: string): this\n  /**\n   * Only relevant for range columns. Match only rows where every element in\n   * `column` is less than any element in `range`.\n   *\n   * @param column - The range column to filter on\n   * @param range - The range to filter with\n   */\n  rangeLt(column: string, range: string): this {\n    this.url.searchParams.append(column, `sl.${range}`)\n    return this\n  }\n\n  rangeLte<ColumnName extends string & keyof Row>(column: ColumnName, range: string): this\n  rangeLte(column: string, range: string): this\n  /**\n   * Only relevant for range columns. Match only rows where every element in\n   * `column` is either contained in `range` or less than any element in\n   * `range`.\n   *\n   * @param column - The range column to filter on\n   * @param range - The range to filter with\n   */\n  rangeLte(column: string, range: string): this {\n    this.url.searchParams.append(column, `nxr.${range}`)\n    return this\n  }\n\n  rangeAdjacent<ColumnName extends string & keyof Row>(column: ColumnName, range: string): this\n  rangeAdjacent(column: string, range: string): this\n  /**\n   * Only relevant for range columns. Match only rows where `column` is\n   * mutually exclusive to `range` and there can be no element between the two\n   * ranges.\n   *\n   * @param column - The range column to filter on\n   * @param range - The range to filter with\n   */\n  rangeAdjacent(column: string, range: string): this {\n    this.url.searchParams.append(column, `adj.${range}`)\n    return this\n  }\n\n  overlaps<ColumnName extends string & keyof Row>(\n    column: ColumnName,\n    value: string | Row[ColumnName][]\n  ): this\n  overlaps(column: string, value: string | unknown[]): this\n  /**\n   * Only relevant for array and range columns. Match only rows where\n   * `column` and `value` have an element in common.\n   *\n   * @param column - The array or range column to filter on\n   * @param value - The array or range value to filter with\n   */\n  overlaps(column: string, value: string | unknown[]): this {\n    if (typeof value === 'string') {\n      // range\n      this.url.searchParams.append(column, `ov.${value}`)\n    } else {\n      // array\n      this.url.searchParams.append(column, `ov.{${value.join(',')}}`)\n    }\n    return this\n  }\n\n  textSearch<ColumnName extends string & keyof Row>(\n    column: ColumnName,\n    query: string,\n    options?: { config?: string; type?: 'plain' | 'phrase' | 'websearch' }\n  ): this\n  textSearch(\n    column: string,\n    query: string,\n    options?: { config?: string; type?: 'plain' | 'phrase' | 'websearch' }\n  ): this\n  /**\n   * Only relevant for text and tsvector columns. Match only rows where\n   * `column` matches the query string in `query`.\n   *\n   * @param column - The text or tsvector column to filter on\n   * @param query - The query text to match with\n   * @param options - Named parameters\n   * @param options.config - The text search configuration to use\n   * @param options.type - Change how the `query` text is interpreted\n   */\n  textSearch(\n    column: string,\n    query: string,\n    { config, type }: { config?: string; type?: 'plain' | 'phrase' | 'websearch' } = {}\n  ): this {\n    let typePart = ''\n    if (type === 'plain') {\n      typePart = 'pl'\n    } else if (type === 'phrase') {\n      typePart = 'ph'\n    } else if (type === 'websearch') {\n      typePart = 'w'\n    }\n    const configPart = config === undefined ? '' : `(${config})`\n    this.url.searchParams.append(column, `${typePart}fts${configPart}.${query}`)\n    return this\n  }\n\n  match<ColumnName extends string & keyof Row>(query: Record<ColumnName, Row[ColumnName]>): this\n  match(query: Record<string, unknown>): this\n  /**\n   * Match only rows where each column in `query` keys is equal to its\n   * associated value. Shorthand for multiple `.eq()`s.\n   *\n   * @param query - The object to filter with, with column names as keys mapped\n   * to their filter values\n   */\n  match(query: Record<string, unknown>): this {\n    Object.entries(query).forEach(([column, value]) => {\n      this.url.searchParams.append(column, `eq.${value}`)\n    })\n    return this\n  }\n\n  not<ColumnName extends string & keyof Row>(\n    column: ColumnName,\n    operator: FilterOperator,\n    value: Row[ColumnName]\n  ): this\n  not(column: string, operator: string, value: unknown): this\n  /**\n   * Match only rows which doesn't satisfy the filter.\n   *\n   * Unlike most filters, `opearator` and `value` are used as-is and need to\n   * follow [PostgREST\n   * syntax](https://postgrest.org/en/stable/api.html#operators). You also need\n   * to make sure they are properly sanitized.\n   *\n   * @param column - The column to filter on\n   * @param operator - The operator to be negated to filter with, following\n   * PostgREST syntax\n   * @param value - The value to filter with, following PostgREST syntax\n   */\n  not(column: string, operator: string, value: unknown): this {\n    this.url.searchParams.append(column, `not.${operator}.${value}`)\n    return this\n  }\n\n  /**\n   * Match only rows which satisfy at least one of the filters.\n   *\n   * Unlike most filters, `filters` is used as-is and needs to follow [PostgREST\n   * syntax](https://postgrest.org/en/stable/api.html#operators). You also need\n   * to make sure it's properly sanitized.\n   *\n   * It's currently not possible to do an `.or()` filter across multiple tables.\n   *\n   * @param filters - The filters to use, following PostgREST syntax\n   * @param foreignTable - Set this to filter on foreign tables instead of the\n   * current table\n   */\n  or(filters: string, { foreignTable }: { foreignTable?: string } = {}): this {\n    const key = foreignTable ? `${foreignTable}.or` : 'or'\n    this.url.searchParams.append(key, `(${filters})`)\n    return this\n  }\n\n  filter<ColumnName extends string & keyof Row>(\n    column: ColumnName,\n    operator: `${'' | 'not.'}${FilterOperator}`,\n    value: unknown\n  ): this\n  filter(column: string, operator: string, value: unknown): this\n  /**\n   * Match only rows which satisfy the filter. This is an escape hatch - you\n   * should use the specific filter methods wherever possible.\n   *\n   * Unlike most filters, `opearator` and `value` are used as-is and need to\n   * follow [PostgREST\n   * syntax](https://postgrest.org/en/stable/api.html#operators). You also need\n   * to make sure they are properly sanitized.\n   *\n   * @param column - The column to filter on\n   * @param operator - The operator to filter with, following PostgREST syntax\n   * @param value - The value to filter with, following PostgREST syntax\n   */\n  filter(column: string, operator: string, value: unknown): this {\n    this.url.searchParams.append(column, `${operator}.${value}`)\n    return this\n  }\n}\n"]},"metadata":{},"sourceType":"module"}