{"ast":null,"code":"import React, { useContext, useState, useEffect } from 'react';\nimport { supabase } from './Database.js';\nexport default class Auth {\n  // Restore from localStorage    \n  constructor() {\n    this.authenticated = false;\n    this.id = 0;\n    this.userEmail = null;\n    this.role = null;\n\n    if (window.localStorage.getItem(\"authenticator\")) {\n      this.authenticated = window.localStorage.getItem(\"authenticated\");\n      this.id = window.localStorage.getItem(\"authenticator\");\n      this.userEmail = window.localStorage.getItem(\"user_email\");\n      this.role = window.localStorage.getItem(\"user_role\");\n    }\n  }\n\n  static getInstance() {\n    if (!Auth.myInstance) {\n      Auth.myInstance = new Auth(); // For debug purpose\n\n      this.id += 1;\n    }\n\n    return this.myInstance;\n  }\n\n  login(userEmail, userRole) {\n    this.authenticated = true;\n    this.userEmail = userEmail;\n    this.role = userRole;\n    window.localStorage.setItem(\"authenticator\", this.id);\n    window.localStorage.setItem(\"user_email\", this.userEmail);\n    window.localStorage.setItem(\"authenticated\", this.authenticated);\n    window.localStorage.setItem(\"user_role\", this.role);\n  }\n\n  logout(callback) {\n    this.authenticated = false;\n    this.userEmail = null;\n    window.localStorage.removeItem(\"authenticator\");\n    window.localStorage.removeItem(\"user_email\");\n    window.localStorage.removeItem(\"authenticated\");\n    window.localStorage.removeItem(\"user_role\");\n  }\n\n  isAuthenticated() {\n    return this.authenticated;\n  }\n\n}\n/*\r\nconst AuthContext = React.createContext()\r\n\r\nexport function AuthProvider({ children }) {\r\n    const [user, setUser] = useState()\r\n    const [loading, setLoading] = useState(true)\r\n  \r\n    useEffect(() => {\r\n      // Check active sessions and sets the user\r\n      const session = supabase.auth.session()\r\n  \r\n      setUser(session?.user ?? null)\r\n      setLoading(false)\r\n  \r\n      // Listen for changes on auth state (logged in, signed out, etc.)\r\n      const { data: listener } = supabase.auth.onAuthStateChange(async (event, session) => {\r\n        setUser(session?.user ?? null)\r\n        setLoading(false)\r\n      })\r\n  \r\n      return () => {\r\n        listener?.unsubscribe()\r\n      }\r\n    }, [])\r\n  \r\n    // Will be passed down to Signup, Login and Dashboard components\r\n    const value = {\r\n      signUp: (data) => supabase.auth.signUp(data),\r\n      signIn: (data) => supabase.auth.signIn(data),\r\n      signOut: () => supabase.auth.signOut(),\r\n      user,\r\n    }\r\n  \r\n    return <AuthContext.Provider value={value}>{!loading && children}</AuthContext.Provider>\r\n  }\r\n\r\n  export function useAuth() {\r\n    return useContext(AuthContext)\r\n  }*/\n\nAuth.myInstance = null;","map":{"version":3,"names":["React","useContext","useState","useEffect","supabase","Auth","constructor","authenticated","id","userEmail","role","window","localStorage","getItem","getInstance","myInstance","login","userRole","setItem","logout","callback","removeItem","isAuthenticated"],"sources":["D:/Documenti/GitHub/ZooGames/application/frontend/src/components/Auth.js"],"sourcesContent":["import React, { useContext, useState, useEffect } from 'react'\r\nimport { supabase } from './Database.js'\r\n\r\nexport default class Auth {\r\n\r\n  static myInstance = null;\r\n  authenticated = false;\r\n  id = 0;\r\n  userEmail = null;\r\n  role = null;\r\n\r\n  // Restore from localStorage    \r\n  constructor() {\r\n      if(window.localStorage.getItem(\"authenticator\")) {\r\n          this.authenticated = window.localStorage.getItem(\"authenticated\");\r\n          this.id = window.localStorage.getItem(\"authenticator\");\r\n          this.userEmail = window.localStorage.getItem(\"user_email\");\r\n          this.role = window.localStorage.getItem(\"user_role\");\r\n      }\r\n  }\r\n\r\n  static getInstance() {\r\n      if( !Auth.myInstance ) {\r\n          Auth.myInstance = new Auth();\r\n\r\n          // For debug purpose\r\n          this.id += 1;\r\n      \r\n      }\r\n\r\n      return this.myInstance;\r\n  }\r\n\r\n  login(userEmail, userRole) {\r\n      this.authenticated = true;\r\n      this.userEmail = userEmail;\r\n      this.role = userRole;\r\n      window.localStorage.setItem(\"authenticator\", this.id);\r\n      window.localStorage.setItem(\"user_email\", this.userEmail);\r\n      window.localStorage.setItem(\"authenticated\", this.authenticated);\r\n      window.localStorage.setItem(\"user_role\", this.role);\r\n  }\r\n\r\n  logout(callback) {\r\n      this.authenticated = false;\r\n      this.userEmail = null;\r\n      window.localStorage.removeItem(\"authenticator\");\r\n      window.localStorage.removeItem(\"user_email\");\r\n      window.localStorage.removeItem(\"authenticated\");\r\n      window.localStorage.removeItem(\"user_role\");\r\n  }\r\n\r\n  isAuthenticated() { return this.authenticated; }\r\n\r\n}\r\n\r\n\r\n/*\r\nconst AuthContext = React.createContext()\r\n\r\nexport function AuthProvider({ children }) {\r\n    const [user, setUser] = useState()\r\n    const [loading, setLoading] = useState(true)\r\n  \r\n    useEffect(() => {\r\n      // Check active sessions and sets the user\r\n      const session = supabase.auth.session()\r\n  \r\n      setUser(session?.user ?? null)\r\n      setLoading(false)\r\n  \r\n      // Listen for changes on auth state (logged in, signed out, etc.)\r\n      const { data: listener } = supabase.auth.onAuthStateChange(async (event, session) => {\r\n        setUser(session?.user ?? null)\r\n        setLoading(false)\r\n      })\r\n  \r\n      return () => {\r\n        listener?.unsubscribe()\r\n      }\r\n    }, [])\r\n  \r\n    // Will be passed down to Signup, Login and Dashboard components\r\n    const value = {\r\n      signUp: (data) => supabase.auth.signUp(data),\r\n      signIn: (data) => supabase.auth.signIn(data),\r\n      signOut: () => supabase.auth.signOut(),\r\n      user,\r\n    }\r\n  \r\n    return <AuthContext.Provider value={value}>{!loading && children}</AuthContext.Provider>\r\n  }\r\n\r\n  export function useAuth() {\r\n    return useContext(AuthContext)\r\n  }*/"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,EAAsCC,SAAtC,QAAuD,OAAvD;AACA,SAASC,QAAT,QAAyB,eAAzB;AAEA,eAAe,MAAMC,IAAN,CAAW;EAQxB;EACAC,WAAW,GAAG;IAAA,KANdC,aAMc,GANE,KAMF;IAAA,KALdC,EAKc,GALT,CAKS;IAAA,KAJdC,SAIc,GAJF,IAIE;IAAA,KAHdC,IAGc,GAHP,IAGO;;IACV,IAAGC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,eAA5B,CAAH,EAAiD;MAC7C,KAAKN,aAAL,GAAqBI,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,eAA5B,CAArB;MACA,KAAKL,EAAL,GAAUG,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,eAA5B,CAAV;MACA,KAAKJ,SAAL,GAAiBE,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,YAA5B,CAAjB;MACA,KAAKH,IAAL,GAAYC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,WAA5B,CAAZ;IACH;EACJ;;EAEiB,OAAXC,WAAW,GAAG;IACjB,IAAI,CAACT,IAAI,CAACU,UAAV,EAAuB;MACnBV,IAAI,CAACU,UAAL,GAAkB,IAAIV,IAAJ,EAAlB,CADmB,CAGnB;;MACA,KAAKG,EAAL,IAAW,CAAX;IAEH;;IAED,OAAO,KAAKO,UAAZ;EACH;;EAEDC,KAAK,CAACP,SAAD,EAAYQ,QAAZ,EAAsB;IACvB,KAAKV,aAAL,GAAqB,IAArB;IACA,KAAKE,SAAL,GAAiBA,SAAjB;IACA,KAAKC,IAAL,GAAYO,QAAZ;IACAN,MAAM,CAACC,YAAP,CAAoBM,OAApB,CAA4B,eAA5B,EAA6C,KAAKV,EAAlD;IACAG,MAAM,CAACC,YAAP,CAAoBM,OAApB,CAA4B,YAA5B,EAA0C,KAAKT,SAA/C;IACAE,MAAM,CAACC,YAAP,CAAoBM,OAApB,CAA4B,eAA5B,EAA6C,KAAKX,aAAlD;IACAI,MAAM,CAACC,YAAP,CAAoBM,OAApB,CAA4B,WAA5B,EAAyC,KAAKR,IAA9C;EACH;;EAEDS,MAAM,CAACC,QAAD,EAAW;IACb,KAAKb,aAAL,GAAqB,KAArB;IACA,KAAKE,SAAL,GAAiB,IAAjB;IACAE,MAAM,CAACC,YAAP,CAAoBS,UAApB,CAA+B,eAA/B;IACAV,MAAM,CAACC,YAAP,CAAoBS,UAApB,CAA+B,YAA/B;IACAV,MAAM,CAACC,YAAP,CAAoBS,UAApB,CAA+B,eAA/B;IACAV,MAAM,CAACC,YAAP,CAAoBS,UAApB,CAA+B,WAA/B;EACH;;EAEDC,eAAe,GAAG;IAAE,OAAO,KAAKf,aAAZ;EAA4B;;AAjDxB;AAsD1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AA5FqBF,I,CAEZU,U,GAAa,I"},"metadata":{},"sourceType":"module"}