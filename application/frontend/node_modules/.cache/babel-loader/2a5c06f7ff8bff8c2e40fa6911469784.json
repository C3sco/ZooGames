{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { _generateLinkResponse, _noResolveJsonResponse, _request, _userResponse } from './lib/fetch';\nimport { resolveFetch } from './lib/helpers';\nimport { isAuthError } from './lib/errors';\nexport default class GoTrueAdminApi {\n  constructor(_ref) {\n    let {\n      url = '',\n      headers = {},\n      fetch\n    } = _ref;\n    this.url = url;\n    this.headers = headers;\n    this.fetch = resolveFetch(fetch);\n    this.mfa = {\n      listFactors: this._listFactors.bind(this),\n      deleteFactor: this._deleteFactor.bind(this)\n    };\n  }\n  /**\n   * Removes a logged-in session.\n   * @param jwt A valid, logged-in JWT.\n   */\n\n\n  signOut(jwt) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        yield _request(this.fetch, 'POST', `${this.url}/logout`, {\n          headers: this.headers,\n          jwt,\n          noResolveJson: true\n        });\n        return {\n          data: null,\n          error: null\n        };\n      } catch (error) {\n        if (isAuthError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n\n        throw error;\n      }\n    });\n  }\n  /**\n   * Sends an invite link to an email address.\n   * @param email The email address of the user.\n   * @param options.redirectTo A URL or mobile deeplink to send the user to after they are confirmed.\n   * @param options.data Optional user metadata\n   */\n\n\n  inviteUserByEmail(email) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        return yield _request(this.fetch, 'POST', `${this.url}/invite`, {\n          body: {\n            email,\n            data: options.data\n          },\n          headers: this.headers,\n          redirectTo: options.redirectTo,\n          xform: _userResponse\n        });\n      } catch (error) {\n        if (isAuthError(error)) {\n          return {\n            data: {\n              user: null\n            },\n            error\n          };\n        }\n\n        throw error;\n      }\n    });\n  }\n  /**\n   * Generates email links and OTPs to be sent via a custom email provider.\n   * @param email The user's email.\n   * @param options.password User password. For signup only.\n   * @param options.data Optional user metadata. For signup only.\n   * @param options.redirectTo The redirect url which should be appended to the generated link\n   */\n\n\n  generateLink(params) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const {\n          options\n        } = params,\n              rest = __rest(params, [\"options\"]);\n\n        const body = Object.assign(Object.assign({}, rest), options);\n\n        if ('newEmail' in rest) {\n          // replace newEmail with new_email in request body\n          body.new_email = rest === null || rest === void 0 ? void 0 : rest.newEmail;\n          delete body['newEmail'];\n        }\n\n        return yield _request(this.fetch, 'POST', `${this.url}/admin/generate_link`, {\n          body: body,\n          headers: this.headers,\n          xform: _generateLinkResponse,\n          redirectTo: options === null || options === void 0 ? void 0 : options.redirectTo\n        });\n      } catch (error) {\n        if (isAuthError(error)) {\n          return {\n            data: {\n              properties: null,\n              user: null\n            },\n            error\n          };\n        }\n\n        throw error;\n      }\n    });\n  } // User Admin API\n\n  /**\n   * Creates a new user.\n   * This function should only be called on a server. Never expose your `service_role` key in the browser.\n   */\n\n\n  createUser(attributes) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        return yield _request(this.fetch, 'POST', `${this.url}/admin/users`, {\n          body: attributes,\n          headers: this.headers,\n          xform: _userResponse\n        });\n      } catch (error) {\n        if (isAuthError(error)) {\n          return {\n            data: {\n              user: null\n            },\n            error\n          };\n        }\n\n        throw error;\n      }\n    });\n  }\n  /**\n   * Get a list of users.\n   *\n   * This function should only be called on a server. Never expose your `service_role` key in the browser.\n   * @param params An object which supports `page` and `perPage` as numbers, to alter the paginated results.\n   */\n\n\n  listUsers(params) {\n    var _a, _b, _c, _d, _e, _f, _g;\n\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        let pagination = {\n          nextPage: null,\n          lastPage: 0,\n          total: 0\n        };\n        const response = yield _request(this.fetch, 'GET', `${this.url}/admin/users`, {\n          headers: this.headers,\n          noResolveJson: true,\n          query: {\n            page: (_b = (_a = params === null || params === void 0 ? void 0 : params.page) === null || _a === void 0 ? void 0 : _a.toString()) !== null && _b !== void 0 ? _b : '',\n            per_page: (_d = (_c = params === null || params === void 0 ? void 0 : params.perPage) === null || _c === void 0 ? void 0 : _c.toString()) !== null && _d !== void 0 ? _d : ''\n          },\n          xform: _noResolveJsonResponse\n        });\n        if (response.error) throw response.error;\n        const users = yield response.json();\n        const total = (_e = response.headers.get('x-total-count')) !== null && _e !== void 0 ? _e : 0;\n        const links = (_g = (_f = response.headers.get('link')) === null || _f === void 0 ? void 0 : _f.split(',')) !== null && _g !== void 0 ? _g : [];\n\n        if (links.length > 0) {\n          links.forEach(link => {\n            const page = parseInt(link.split(';')[0].split('=')[1].substring(0, 1));\n            const rel = JSON.parse(link.split(';')[1].split('=')[1]);\n            pagination[`${rel}Page`] = page;\n          });\n          pagination.total = parseInt(total);\n        }\n\n        return {\n          data: Object.assign(Object.assign({}, users), pagination),\n          error: null\n        };\n      } catch (error) {\n        if (isAuthError(error)) {\n          return {\n            data: {\n              users: []\n            },\n            error\n          };\n        }\n\n        throw error;\n      }\n    });\n  }\n  /**\n   * Get user by id.\n   *\n   * @param uid The user's unique identifier\n   *\n   * This function should only be called on a server. Never expose your `service_role` key in the browser.\n   */\n\n\n  getUserById(uid) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        return yield _request(this.fetch, 'GET', `${this.url}/admin/users/${uid}`, {\n          headers: this.headers,\n          xform: _userResponse\n        });\n      } catch (error) {\n        if (isAuthError(error)) {\n          return {\n            data: {\n              user: null\n            },\n            error\n          };\n        }\n\n        throw error;\n      }\n    });\n  }\n  /**\n   * Updates the user data.\n   *\n   * @param attributes The data you want to update.\n   *\n   * This function should only be called on a server. Never expose your `service_role` key in the browser.\n   */\n\n\n  updateUserById(uid, attributes) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        return yield _request(this.fetch, 'PUT', `${this.url}/admin/users/${uid}`, {\n          body: attributes,\n          headers: this.headers,\n          xform: _userResponse\n        });\n      } catch (error) {\n        if (isAuthError(error)) {\n          return {\n            data: {\n              user: null\n            },\n            error\n          };\n        }\n\n        throw error;\n      }\n    });\n  }\n  /**\n   * Delete a user. Requires a `service_role` key.\n   *\n   * @param id The user id you want to remove.\n   *\n   * This function should only be called on a server. Never expose your `service_role` key in the browser.\n   */\n\n\n  deleteUser(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        return yield _request(this.fetch, 'DELETE', `${this.url}/admin/users/${id}`, {\n          headers: this.headers,\n          xform: _userResponse\n        });\n      } catch (error) {\n        if (isAuthError(error)) {\n          return {\n            data: {\n              user: null\n            },\n            error\n          };\n        }\n\n        throw error;\n      }\n    });\n  }\n\n  _listFactors(params) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield _request(this.fetch, 'GET', `${this.url}/admin/users/${params.userId}/factors`, {\n          headers: this.headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        if (isAuthError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n\n        throw error;\n      }\n    });\n  }\n\n  _deleteFactor(params) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield _request(this.fetch, 'DELETE', `${this.url}/admin/users/${params.userId}/factors/${params.id}`, {\n          headers: this.headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        if (isAuthError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n\n        throw error;\n      }\n    });\n  }\n\n}","map":{"version":3,"mappings":"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","names":["_generateLinkResponse","_noResolveJsonResponse","_request","_userResponse","resolveFetch","isAuthError","GoTrueAdminApi","constructor","url","headers","fetch","mfa","listFactors","_listFactors","bind","deleteFactor","_deleteFactor","signOut","jwt","noResolveJson","data","error","inviteUserByEmail","email","options","body","redirectTo","xform","user","generateLink","params","rest","new_email","newEmail","properties","createUser","attributes","listUsers","pagination","nextPage","lastPage","total","response","query","page","_a","toString","_b","per_page","perPage","_c","_d","users","json","get","_e","links","_f","split","_g","length","forEach","link","parseInt","substring","rel","JSON","parse","getUserById","uid","updateUserById","deleteUser","id","userId"],"sources":["D:\\Documenti\\GitHub\\ZooGames\\application\\frontend\\node_modules\\@supabase\\gotrue-js\\src\\GoTrueAdminApi.ts"],"sourcesContent":["import {\n  Fetch,\n  _generateLinkResponse,\n  _noResolveJsonResponse,\n  _request,\n  _userResponse,\n} from './lib/fetch'\nimport { resolveFetch } from './lib/helpers'\nimport {\n  AdminUserAttributes,\n  GenerateLinkParams,\n  GenerateLinkResponse,\n  Pagination,\n  User,\n  UserResponse,\n  GoTrueAdminMFAApi,\n  AuthMFAAdminDeleteFactorParams,\n  AuthMFAAdminDeleteFactorResponse,\n  AuthMFAAdminListFactorsParams,\n  AuthMFAAdminListFactorsResponse,\n  PageParams,\n} from './lib/types'\nimport { AuthError, isAuthError } from './lib/errors'\n\nexport default class GoTrueAdminApi {\n  /** Contains all MFA administration methods. */\n  mfa: GoTrueAdminMFAApi\n\n  protected url: string\n  protected headers: {\n    [key: string]: string\n  }\n  protected fetch: Fetch\n\n  constructor({\n    url = '',\n    headers = {},\n    fetch,\n  }: {\n    url: string\n    headers?: {\n      [key: string]: string\n    }\n    fetch?: Fetch\n  }) {\n    this.url = url\n    this.headers = headers\n    this.fetch = resolveFetch(fetch)\n    this.mfa = {\n      listFactors: this._listFactors.bind(this),\n      deleteFactor: this._deleteFactor.bind(this),\n    }\n  }\n\n  /**\n   * Removes a logged-in session.\n   * @param jwt A valid, logged-in JWT.\n   */\n  async signOut(jwt: string): Promise<{ data: null; error: AuthError | null }> {\n    try {\n      await _request(this.fetch, 'POST', `${this.url}/logout`, {\n        headers: this.headers,\n        jwt,\n        noResolveJson: true,\n      })\n      return { data: null, error: null }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Sends an invite link to an email address.\n   * @param email The email address of the user.\n   * @param options.redirectTo A URL or mobile deeplink to send the user to after they are confirmed.\n   * @param options.data Optional user metadata\n   */\n  async inviteUserByEmail(\n    email: string,\n    options: {\n      redirectTo?: string\n      data?: object\n    } = {}\n  ): Promise<UserResponse> {\n    try {\n      return await _request(this.fetch, 'POST', `${this.url}/invite`, {\n        body: { email, data: options.data },\n        headers: this.headers,\n        redirectTo: options.redirectTo,\n        xform: _userResponse,\n      })\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null }, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Generates email links and OTPs to be sent via a custom email provider.\n   * @param email The user's email.\n   * @param options.password User password. For signup only.\n   * @param options.data Optional user metadata. For signup only.\n   * @param options.redirectTo The redirect url which should be appended to the generated link\n   */\n  async generateLink(params: GenerateLinkParams): Promise<GenerateLinkResponse> {\n    try {\n      const { options, ...rest } = params\n      const body: any = { ...rest, ...options }\n      if ('newEmail' in rest) {\n        // replace newEmail with new_email in request body\n        body.new_email = rest?.newEmail\n        delete body['newEmail']\n      }\n      return await _request(this.fetch, 'POST', `${this.url}/admin/generate_link`, {\n        body: body,\n        headers: this.headers,\n        xform: _generateLinkResponse,\n        redirectTo: options?.redirectTo,\n      })\n    } catch (error) {\n      if (isAuthError(error)) {\n        return {\n          data: {\n            properties: null,\n            user: null,\n          },\n          error,\n        }\n      }\n      throw error\n    }\n  }\n\n  // User Admin API\n  /**\n   * Creates a new user.\n   * This function should only be called on a server. Never expose your `service_role` key in the browser.\n   */\n  async createUser(attributes: AdminUserAttributes): Promise<UserResponse> {\n    try {\n      return await _request(this.fetch, 'POST', `${this.url}/admin/users`, {\n        body: attributes,\n        headers: this.headers,\n        xform: _userResponse,\n      })\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null }, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Get a list of users.\n   *\n   * This function should only be called on a server. Never expose your `service_role` key in the browser.\n   * @param params An object which supports `page` and `perPage` as numbers, to alter the paginated results.\n   */\n  async listUsers(\n    params?: PageParams\n  ): Promise<\n    | { data: { users: User[]; aud: string } & Pagination; error: null }\n    | { data: { users: [] }; error: AuthError }\n  > {\n    try {\n      let pagination: Pagination = { nextPage: null, lastPage: 0, total: 0 }\n      const response = await _request(this.fetch, 'GET', `${this.url}/admin/users`, {\n        headers: this.headers,\n        noResolveJson: true,\n        query: {\n          page: params?.page?.toString() ?? '',\n          per_page: params?.perPage?.toString() ?? '',\n        },\n        xform: _noResolveJsonResponse,\n      })\n      if (response.error) throw response.error\n\n      const users = await response.json()\n      const total = response.headers.get('x-total-count') ?? 0\n      const links = response.headers.get('link')?.split(',') ?? []\n      if (links.length > 0) {\n        links.forEach((link: string) => {\n          const page = parseInt(link.split(';')[0].split('=')[1].substring(0, 1))\n          const rel = JSON.parse(link.split(';')[1].split('=')[1])\n          pagination[`${rel}Page`] = page\n        })\n\n        pagination.total = parseInt(total)\n      }\n      return { data: { ...users, ...pagination }, error: null }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { users: [] }, error }\n      }\n      throw error\n    }\n  }\n\n  /**\n   * Get user by id.\n   *\n   * @param uid The user's unique identifier\n   *\n   * This function should only be called on a server. Never expose your `service_role` key in the browser.\n   */\n  async getUserById(uid: string): Promise<UserResponse> {\n    try {\n      return await _request(this.fetch, 'GET', `${this.url}/admin/users/${uid}`, {\n        headers: this.headers,\n        xform: _userResponse,\n      })\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null }, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Updates the user data.\n   *\n   * @param attributes The data you want to update.\n   *\n   * This function should only be called on a server. Never expose your `service_role` key in the browser.\n   */\n  async updateUserById(uid: string, attributes: AdminUserAttributes): Promise<UserResponse> {\n    try {\n      return await _request(this.fetch, 'PUT', `${this.url}/admin/users/${uid}`, {\n        body: attributes,\n        headers: this.headers,\n        xform: _userResponse,\n      })\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null }, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Delete a user. Requires a `service_role` key.\n   *\n   * @param id The user id you want to remove.\n   *\n   * This function should only be called on a server. Never expose your `service_role` key in the browser.\n   */\n  async deleteUser(id: string): Promise<UserResponse> {\n    try {\n      return await _request(this.fetch, 'DELETE', `${this.url}/admin/users/${id}`, {\n        headers: this.headers,\n        xform: _userResponse,\n      })\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null }, error }\n      }\n\n      throw error\n    }\n  }\n\n  private async _listFactors(\n    params: AuthMFAAdminListFactorsParams\n  ): Promise<AuthMFAAdminListFactorsResponse> {\n    try {\n      const data = await _request(\n        this.fetch,\n        'GET',\n        `${this.url}/admin/users/${params.userId}/factors`,\n        {\n          headers: this.headers,\n        }\n      )\n      return { data, error: null }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  private async _deleteFactor(\n    params: AuthMFAAdminDeleteFactorParams\n  ): Promise<AuthMFAAdminDeleteFactorResponse> {\n    try {\n      const data = await _request(\n        this.fetch,\n        'DELETE',\n        `${this.url}/admin/users/${params.userId}/factors/${params.id}`,\n        {\n          headers: this.headers,\n        }\n      )\n\n      return { data, error: null }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}